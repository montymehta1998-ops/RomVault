{"file_contents":{"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"replit.md":{"content":"# Overview\n\nThis is a RetroROMs application - a classic video game ROM archive platform that allows users to browse, search, and discover retro gaming content. The application serves as a comprehensive library for classic gaming ROMs across various vintage console platforms like NES, SNES, Game Boy, Sega Genesis, PlayStation, and Nintendo 64. Users can explore games by category, view detailed game information, and access download functionality for ROM files.\n\n# User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n# System Architecture\n\n## Frontend Architecture\n- **Framework**: React 18 with TypeScript using Vite as the build tool\n- **UI Library**: Radix UI components with shadcn/ui design system and Tailwind CSS for styling\n- **Routing**: Wouter for lightweight client-side routing\n- **State Management**: TanStack Query (React Query) for server state management and caching\n- **Theme System**: Custom theme provider with dark/light mode support using CSS variables\n\n## Backend Architecture\n- **Runtime**: Node.js with Express.js server framework\n- **Development**: Hot module replacement via Vite in development mode\n- **API Structure**: RESTful API endpoints for ROM data, categories, and games\n- **Data Storage**: File-based storage using JSON for static game data with in-memory caching\n- **Session Management**: PostgreSQL session store with connect-pg-simple\n\n## Database Layer\n- **ORM**: Drizzle ORM with PostgreSQL dialect\n- **Schema**: Type-safe schema definitions for users, categories, and games tables\n- **Validation**: Zod integration for runtime type validation\n- **Migrations**: Drizzle Kit for database schema management\n\n## Component Architecture\n- **Design System**: Comprehensive UI component library based on Radix primitives\n- **Layout**: Responsive design with header, footer, and main content areas\n- **Game Components**: Specialized components for game cards, category displays, and search functionality\n- **Reusable Components**: Modular UI components for buttons, forms, dialogs, and navigation\n\n# External Dependencies\n\n## Database Services\n- **Neon Database**: Serverless PostgreSQL database hosting (@neondatabase/serverless)\n- **PostgreSQL**: Primary database for user data, game metadata, and session storage\n\n## UI and Styling\n- **Radix UI**: Complete suite of accessible UI primitives for React\n- **Tailwind CSS**: Utility-first CSS framework for styling\n- **Font Awesome**: Icon library for consistent iconography\n- **Google Fonts**: Web fonts including DM Sans, Fira Code, and Geist Mono\n\n## Development Tools\n- **Replit Integration**: Development environment integration with runtime error overlay and cartographer plugin\n- **ESBuild**: Fast JavaScript bundler for production builds\n- **PostCSS**: CSS processing with Autoprefixer for cross-browser compatibility\n\n## Data Management\n- **TanStack Query**: Server state synchronization and caching\n- **React Hook Form**: Form state management with validation\n- **Date-fns**: Date manipulation and formatting utilities\n\n## Validation and Type Safety\n- **Zod**: Runtime schema validation\n- **TypeScript**: Static type checking throughout the application\n- **Drizzle-Zod**: Integration between Drizzle ORM and Zod validation","size_bytes":3239},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \"var(--radius)\",\n        md: \"calc(var(--radius) - 2px)\",\n        sm: \"calc(var(--radius) - 4px)\",\n      },\n      colors: {\n        background: \"var(--background)\",\n        foreground: \"var(--foreground)\",\n        card: {\n          DEFAULT: \"var(--card)\",\n          foreground: \"var(--card-foreground)\",\n        },\n        popover: {\n          DEFAULT: \"var(--popover)\",\n          foreground: \"var(--popover-foreground)\",\n        },\n        primary: {\n          DEFAULT: \"var(--primary)\",\n          foreground: \"var(--primary-foreground)\",\n        },\n        secondary: {\n          DEFAULT: \"var(--secondary)\",\n          foreground: \"var(--secondary-foreground)\",\n        },\n        muted: {\n          DEFAULT: \"var(--muted)\",\n          foreground: \"var(--muted-foreground)\",\n        },\n        accent: {\n          DEFAULT: \"var(--accent)\",\n          foreground: \"var(--accent-foreground)\",\n        },\n        destructive: {\n          DEFAULT: \"var(--destructive)\",\n          foreground: \"var(--destructive-foreground)\",\n        },\n        border: \"var(--border)\",\n        input: \"var(--input)\",\n        ring: \"var(--ring)\",\n        chart: {\n          \"1\": \"var(--chart-1)\",\n          \"2\": \"var(--chart-2)\",\n          \"3\": \"var(--chart-3)\",\n          \"4\": \"var(--chart-4)\",\n          \"5\": \"var(--chart-5)\",\n        },\n        sidebar: {\n          DEFAULT: \"var(--sidebar)\",\n          foreground: \"var(--sidebar-foreground)\",\n          primary: \"var(--sidebar-primary)\",\n          \"primary-foreground\": \"var(--sidebar-primary-foreground)\",\n          accent: \"var(--sidebar-accent)\",\n          \"accent-foreground\": \"var(--sidebar-accent-foreground)\",\n          border: \"var(--sidebar-border)\",\n          ring: \"var(--sidebar-ring)\",\n        },\n      },\n      fontFamily: {\n        sans: [\"var(--font-sans)\"],\n        serif: [\"var(--font-serif)\"],\n        mono: [\"var(--font-mono)\"],\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: {\n            height: \"0\",\n          },\n          to: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n        },\n        \"accordion-up\": {\n          from: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n          to: {\n            height: \"0\",\n          },\n        },\n        loading: {\n          \"0%\": { \"background-position\": \"200% 0\" },\n          \"100%\": { \"background-position\": \"-200% 0\" },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n        loading: \"loading 1.5s infinite\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":2936},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":971},"server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\n\nconst app = express();\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"…\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  const server = await registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on the port specified in the environment variable PORT\n  // Other ports are firewalled. Default to 5000 if not specified.\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = parseInt(process.env.PORT || '5000', 10);\n  server.listen({\n    port,\n    host: \"0.0.0.0\",\n    reusePort: true,\n  }, () => {\n    log(`serving on port ${port}`);\n  });\n})();\n","size_bytes":2066},"server/routes.ts":{"content":"import type { Express } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport { storage } from \"./storage\";\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  // Get all ROM data\n  app.get(\"/api/rom-data\", async (req, res) => {\n    try {\n      const data = await storage.getRomData();\n      res.json(data);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to fetch ROM data\" });\n    }\n  });\n\n  // Get all categories\n  app.get(\"/api/categories\", async (req, res) => {\n    try {\n      const categories = await storage.getCategories();\n      res.json(categories);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to fetch categories\" });\n    }\n  });\n\n  // Get specific category\n  app.get(\"/api/categories/:id\", async (req, res) => {\n    try {\n      const category = await storage.getCategory(req.params.id);\n      if (!category) {\n        return res.status(404).json({ error: \"Category not found\" });\n      }\n      res.json(category);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to fetch category\" });\n    }\n  });\n\n  // Get games with optional filters\n  app.get(\"/api/games\", async (req, res) => {\n    try {\n      const {\n        categoryId,\n        search,\n        sortBy,\n        page = '1',\n        limit = '20'\n      } = req.query;\n\n      const result = await storage.getGames({\n        categoryId: categoryId as string,\n        search: search as string,\n        sortBy: sortBy as 'downloads' | 'rating' | 'year' | 'title',\n        page: parseInt(page as string),\n        limit: parseInt(limit as string),\n      });\n\n      res.json(result);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to fetch games\" });\n    }\n  });\n\n  // Get specific game\n  app.get(\"/api/games/:id\", async (req, res) => {\n    try {\n      const game = await storage.getGame(req.params.id);\n      if (!game) {\n        return res.status(404).json({ error: \"Game not found\" });\n      }\n      res.json(game);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to fetch game\" });\n    }\n  });\n\n  // Get popular games\n  app.get(\"/api/popular\", async (req, res) => {\n    try {\n      const limit = parseInt(req.query.limit as string) || 4;\n      const games = await storage.getPopularGames(limit);\n      res.json(games);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to fetch popular games\" });\n    }\n  });\n\n  // Get all consoles\n  app.get(\"/api/consoles\", async (req, res) => {\n    try {\n      const consoles = await storage.getConsoles();\n      res.json(consoles);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to fetch consoles\" });\n    }\n  });\n\n  // Get ROMs with pagination and filters\n  app.get(\"/api/roms\", async (req, res) => {\n    try {\n      const {\n        console,\n        category,\n        search,\n        sortBy,\n        page = '1',\n        limit = '20'\n      } = req.query;\n\n      const result = await storage.getGames({\n        console: console as string,\n        category: category as string,\n        search: search as string,\n        sortBy: sortBy as 'downloads' | 'rating' | 'year' | 'title',\n        page: parseInt(page as string),\n        limit: parseInt(limit as string),\n      });\n\n      res.json(result);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to fetch ROMs\" });\n    }\n  });\n\n  // Get ROM by console and slug\n  app.get(\"/api/roms/:console/:slug\", async (req, res) => {\n    try {\n      const { console: consoleParam, slug } = req.params;\n      // Decode URL-encoded console parameter and remove -roms suffix if present\n      const decodedConsole = decodeURIComponent(consoleParam);\n      const console = decodedConsole.endsWith('-roms') ? \n        decodedConsole.slice(0, -5) : decodedConsole;\n      const game = await storage.getGameBySlug(console, slug);\n      if (!game) {\n        return res.status(404).json({ error: \"ROM not found\" });\n      }\n      res.json(game);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to fetch ROM\" });\n    }\n  });\n\n  const httpServer = createServer(app);\n  return httpServer;\n}\n","size_bytes":4116},"server/storage.ts":{"content":"import { type Game, type Category, type RomData, type GameData, type CategoryData } from \"@shared/schema\";\nimport fs from \"fs/promises\";\nimport path from \"path\";\n\nexport interface IStorage {\n  getRomData(): Promise<RomData>;\n  getCategories(): Promise<CategoryData[]>;\n  getCategory(id: string): Promise<CategoryData | undefined>;\n  getGames(params?: {\n    categoryId?: string;\n    console?: string;\n    search?: string;\n    sortBy?: 'downloads' | 'rating' | 'year' | 'title';\n    page?: number;\n    limit?: number;\n  }): Promise<{ games: GameData[]; total: number }>;\n  getGame(id: string): Promise<GameData | undefined>;\n  getGameBySlug(console: string, slug: string): Promise<GameData | undefined>;\n  getPopularGames(limit?: number): Promise<GameData[]>;\n  getConsoles(): Promise<string[]>;\n}\n\nexport class MemStorage implements IStorage {\n  private romData: RomData | null = null;\n  private dataDir: string;\n\n  constructor() {\n    this.dataDir = path.resolve(process.cwd(), \"data\");\n  }\n\n  private async loadData(): Promise<RomData> {\n    if (!this.romData) {\n      try {\n        // Get all JSON files in data directory\n        const files = await fs.readdir(this.dataDir);\n        const jsonFiles = files.filter(file => file.endsWith('_roms.json'));\n        \n        let allGames: GameData[] = [];\n        const categories: CategoryData[] = [];\n        const consoleMap = new Map<string, string>();\n\n        // Console name mappings\n        const consoleNames: Record<string, string> = {\n          '3do': '3DO',\n          '3ds': '3DS',\n          'acorn_archimedes': 'Acorn Archimedes',\n          'acorn_atom': 'Acorn Atom',\n          'action_max': 'Action Max',\n          'amiga': 'Amiga',\n          'amstrad_cpc': 'Amstrad CPC',\n          'amstrad_gx4000': 'Amstrad GX4000',\n          'apple_2_gs': 'Apple IIgs',\n          'apple_2': 'Apple II',\n          'atari_2600': 'Atari 2600',\n          'atari_5200': 'Atari 5200',\n          'atari_7800': 'Atari 7800',\n          'atari_8_bit': 'Atari 8-bit',\n          'atari_jaguar': 'Atari Jaguar',\n          'atari_lynx': 'Atari Lynx',\n          'atari_st': 'Atari ST',\n          'bally_astrocade': 'Bally Astrocade',\n          'bbc_micro': 'BBC Micro',\n          'capcom_play_system_1': 'Capcom Play System 1',\n          'cd_i': 'CD-i',\n          'colecovision': 'ColecoVision',\n          'commodore_64_preservation': 'Commodore 64',\n          'commodore_64_tapes': 'Commodore 64 Tapes',\n          'commodore_vic_20': 'Commodore VIC-20',\n          'cps2': 'Capcom Play System 2',\n          'cps3': 'Capcom Play System 3',\n          'dos': 'DOS',\n          'famicom': 'Famicom',\n          'fm_7': 'FM-7',\n          'gamate': 'Gamate',\n          'gameboy_color': 'Game Boy Color',\n          'gameboy': 'Game Boy',\n          'gamecube': 'GameCube',\n          'gba': 'Game Boy Advance',\n          'gce_vectrex': 'GCE Vectrex',\n          'intellivision': 'Intellivision',\n          'magnavox_odissey_2': 'Magnavox Odyssey²',\n          'mame': 'Arcade (MAME)',\n          'msx_2': 'MSX2',\n          'msx': 'MSX',\n          'n64': 'Nintendo 64',\n          'n_gage': 'N-Gage',\n          'nds': 'Nintendo DS',\n          'neo_geo_pocket': 'Neo Geo Pocket',\n          'nes': 'Nintendo Entertainment System',\n          'new_geo': 'Neo Geo',\n          'nintendo_wii_u': 'Nintendo Wii U',\n          'pc_fx': 'PC-FX',\n          'playstation_4': 'PlayStation 4',\n          'playstation': 'PlayStation',\n          'playstation_vita': 'PlayStation Vita',\n          'pokemon_mini': 'Pokémon Mini',\n          'ps2': 'PlayStation 2',\n          'ps3': 'PlayStation 3',\n          'psp': 'PlayStation Portable',\n          'sam_coupe': 'SAM Coupé',\n          'satellaview': 'Satellaview',\n          'scummvm': 'ScummVM',\n          'sega_32x': 'Sega 32X',\n          'sega_cd': 'Sega CD',\n          'sega_dreamcast': 'Sega Dreamcast',\n          'sega_game_gear': 'Sega Game Gear',\n          'sega_genesis': 'Sega Genesis',\n          'sega_master_system': 'Sega Master System',\n          'sega_naomi': 'Sega Naomi',\n          'sega_pico': 'Sega Pico',\n          'sega_saturn': 'Sega Saturn',\n          'sg_1000': 'SG-1000',\n          'sharp': 'Sharp',\n          'snes': 'Super Nintendo Entertainment System',\n          'super_cassette_vision': 'Super Cassette Vision',\n          'switch': 'Nintendo Switch',\n          'tandy_trs_80': 'Tandy TRS-80',\n          'tatung_einstein': 'Tatung Einstein',\n          'tiger_game_com': 'Tiger Game.com',\n          'trs_80_color_computer': 'TRS-80 Color Computer',\n          'turbo_duo': 'TurboGrafx-16/PC Engine',\n          'turbografx16': 'TurboGrafx-16',\n          'videopac_g7400': 'Videopac+ G7400',\n          'virtual_boy': 'Virtual Boy',\n          'watara_supervision': 'Watara Supervision',\n          'wii': 'Nintendo Wii',\n          'wonderswan_color': 'WonderSwan Color',\n          'wonderswan': 'WonderSwan',\n          'xbox_one': 'Xbox One',\n          'xbox': 'Xbox',\n          'z_machine': 'Z-Machine',\n          'zx81': 'ZX81',\n          'zx_spectrum': 'ZX Spectrum'\n        };\n\n        // Real download data mapping based on provided data (for sorting)\n        const realDownloadCounts: Record<string, number> = {\n          'psp': 21871621,\n          'ps2': 7768966,\n          'gba': 6930074,\n          'nds': 3811847,\n          '3ds': 3199342,\n          'wii': 2320853,\n          'gamecube': 2217746,\n          'ps3': 2049626,\n          'mame': 1830746,\n          'n64': 1625508,\n          'snes': 1533725,\n          'playstation': 1328110,\n          'nes': 1024524,\n          'switch': 766031,\n          'gameboy_color': 609353,\n          'sega_genesis': 472446,\n          'zx_spectrum': 386624,\n          'sega_dreamcast': 298690,\n          'amstrad_cpc': 290142,\n          'dos': 289487,\n          'amiga': 268800,\n          'xbox': 253893,\n          'new_geo': 213207,\n          'sega_cd': 209624,\n          'gameboy': 197872,\n          'atari_st': 186536,\n          'sharp': 182908,\n          'sega_saturn': 112919,\n          'sega_naomi': 93595,\n          'atari_2600': 82556,\n          'nintendo_wii_u': 81622,\n          'sega_game_gear': 70312,\n          'sega_master_system': 65278,\n          'bbc_micro': 57832,\n          'msx': 53251,\n          'turbografx16': 46977,\n          'capcom_play_system_1': 45741,\n          'tandy_trs_80': 37969,\n          'cd_i': 33824,\n          'cps2': 32492,\n          'sega_pico': 25339,\n          'satellaview': 24178,\n          'intellivision': 24147,\n          'sega_32x': 23920,\n          'colecovision': 23815,\n          'xbox_one': 22087,\n          'n_gage': 18836,\n          'msx_2': 18370,\n          'famicom': 18100,\n          '3do': 17572,\n          'scummvm': 17257,\n          'gce_vectrex': 15932,\n          'atari_lynx': 15555,\n          'atari_5200': 15454,\n          'neo_geo_pocket': 15285,\n          'atari_jaguar': 14095,\n          'cps3': 13645,\n          'atari_7800': 13238,\n          'playstation_vita': 12979,\n          'playstation_4': 12946,\n          'commodore_64_preservation': 11773,\n          'wonderswan_color': 11475,\n          'wonderswan': 11461,\n          'acorn_archimedes': 11087,\n          'sam_coupe': 10189,\n          'pokemon_mini': 9670,\n          'commodore_64_tapes': 9508,\n          'virtual_boy': 9120,\n          'apple_2': 8971,\n          'pc_fx': 7319,\n          'atari_8_bit': 5986,\n          'trs_80_color_computer': 5401,\n          'commodore_vic_20': 5092,\n          'gamate': 4868,\n          'tiger_game_com': 4851,\n          'amstrad_gx4000': 4658,\n          'magnavox_odissey_2': 4591,\n          'videopac_g7400': 4156,\n          'turbo_duo': 3990,\n          'acorn_atom': 3509,\n          'tatung_einstein': 3385,\n          'action_max': 2995,\n          'super_cassette_vision': 2808,\n          'apple_2_gs': 2764,\n          'sg_1000': 2561\n        };\n\n        // Actual game counts from the provided data\n        const actualGameCounts: Record<string, number> = {\n          'psp': 787,\n          'ps2': 288,\n          'gba': 2046,\n          'nds': 2123,\n          '3ds': 117,\n          'wii': 91,\n          'gamecube': 239,\n          'ps3': 41,\n          'mame': 1234,\n          'n64': 877,\n          'snes': 1429,\n          'playstation': 339,\n          'nes': 1146,\n          'switch': 9,\n          'gameboy_color': 926,\n          'sega_genesis': 1026,\n          'zx_spectrum': 5847,\n          'sega_dreamcast': 114,\n          'amstrad_cpc': 4938,\n          'dos': 4110,\n          'amiga': 3185,\n          'xbox': 24,\n          'new_geo': 206,\n          'sega_cd': 103,\n          'gameboy': 574,\n          'atari_st': 2817,\n          'sharp': 2866,\n          'sega_saturn': 103,\n          'sega_naomi': 71,\n          'atari_2600': 440,\n          'nintendo_wii_u': 8,\n          'sega_game_gear': 326,\n          'sega_master_system': 368,\n          'bbc_micro': 1027,\n          'msx': 602,\n          'turbografx16': 103,\n          'capcom_play_system_1': 100,\n          'tandy_trs_80': 655,\n          'cd_i': 46,\n          'cps2': 100,\n          'sega_pico': 332,\n          'satellaview': 242,\n          'intellivision': 233,\n          'sega_32x': 55,\n          'colecovision': 302,\n          'xbox_one': 3,\n          'n_gage': 18,\n          'msx_2': 163,\n          'famicom': 100,\n          '3do': 17,\n          'scummvm': 16,\n          'gce_vectrex': 174,\n          'atari_lynx': 85,\n          'atari_5200': 93,\n          'neo_geo_pocket': 77,\n          'atari_jaguar': 56,\n          'cps3': 6,\n          'atari_7800': 59,\n          'playstation_vita': 2,\n          'playstation_4': 2,\n          'commodore_64_preservation': 96,\n          'wonderswan_color': 96,\n          'wonderswan': 123,\n          'acorn_archimedes': 155,\n          'sam_coupe': 139,\n          'pokemon_mini': 15,\n          'commodore_64_tapes': 100,\n          'virtual_boy': 17,\n          'apple_2': 103,\n          'pc_fx': 20,\n          'atari_8_bit': 18,\n          'trs_80_color_computer': 73,\n          'commodore_vic_20': 22,\n          'gamate': 58,\n          'tiger_game_com': 17,\n          'amstrad_gx4000': 19,\n          'magnavox_odissey_2': 23,\n          'videopac_g7400': 34,\n          'turbo_duo': 16,\n          'acorn_atom': 36,\n          'tatung_einstein': 51,\n          'action_max': 5,\n          'super_cassette_vision': 19,\n          'apple_2_gs': 16,\n          'sg_1000': 16\n        };\n\n        // Mapping for console keys to full descriptive IDs with -roms suffix\n        const consoleIdMapping: Record<string, string> = {\n          'psp': 'playstation-portable-roms',\n          'ps2': 'playstation-2-roms',\n          '3ds': 'nintendo-3ds-roms',\n          'gba': 'gameboy-advance-roms',\n          'n64': 'nintendo-64-roms',\n          'nds': 'nintendo-ds-roms',\n          'ps3': 'playstation-3-roms',\n          'wii': 'nintendo-wii-roms',\n          'snes': 'super-nintendo-roms',\n          'nes': 'nintendo-roms',\n          'playstation': 'playstation-roms',\n          'gamecube': 'nintendo-gamecube-roms',\n          'switch': 'nintendo-switch-roms',\n          'xbox': 'microsoft-xbox-roms',\n          'xbox_one': 'microsoft-xbox-one-roms',\n          'gameboy': 'gameboy-roms',\n          'gameboy_color': 'gameboy-color-roms',\n          'mame': 'arcade-mame-roms',\n          'playstation_vita': 'playstation-vita-roms',\n          'playstation_4': 'playstation-4-roms',\n          'nintendo_wii_u': 'nintendo-wii-u-roms'\n        };\n\n        // Process each console's ROM file\n        for (const file of jsonFiles) {\n          const consoleKey = file.replace('_roms.json', '');\n          const consoleName = consoleNames[consoleKey] || consoleKey.toUpperCase();\n          // Create URL-friendly console ID with descriptive names and -roms suffix\n          const consoleId = consoleIdMapping[consoleKey] || `${consoleKey.replace(/_/g, '-')}-roms`;\n          const filePath = path.join(this.dataDir, file);\n          \n          try {\n            const fileData = await fs.readFile(filePath, \"utf-8\");\n            const games = JSON.parse(fileData) as any[];\n            \n            // Convert each game to our format\n            const convertedGames: GameData[] = games.map((game, index) => {\n              const downloads = parseInt(game.downloads) || 0;\n              // Generate rating based on downloads (more downloads = better rating)\n              let rating = 3.0; // Base rating\n              if (downloads > 500000) rating = 4.8 + Math.random() * 0.2;\n              else if (downloads > 300000) rating = 4.5 + Math.random() * 0.3;\n              else if (downloads > 150000) rating = 4.0 + Math.random() * 0.5;\n              else if (downloads > 50000) rating = 3.5 + Math.random() * 0.5;\n              else rating = 3.0 + Math.random() * 0.7;\n              \n              return {\n                id: game.slug || `${consoleKey}-${index}`,\n                title: game.title,\n                platform: consoleName,\n                console: game.console || consoleKey.toUpperCase(),\n                category: game.category === 'N/A' ? 'Other' : (game.category || 'Other'),\n                categoryId: consoleId,\n                image: game.image || '',\n                rating: Math.round(rating * 10) / 10, // Round to 1 decimal\n                downloads: downloads,\n                year: game.release_year === 'N/A' ? 2000 : parseInt(game.release_year) || 2000,\n                region: game.region || 'Unknown',\n                fileName: game.file_name,\n                size: game.size === 'unknown' ? 'Unknown' : game.size,\n                downloadUrl: game.download_url,\n                description: null,\n                longDescription: null,\n                reviewCount: Math.floor(Math.random() * 1000) + 100\n              };\n            });\n\n            allGames.push(...convertedGames);\n            \n            // Create category for this console - use actual game count for display, download count for sorting\n            const actualGameCount = actualGameCounts[consoleKey] || convertedGames.length;\n            const downloadCount = realDownloadCounts[consoleKey] || 0;\n            \n            categories.push({\n              id: consoleId,\n              name: `${consoleName} ROMs`,\n              description: `${consoleName} ROM collection`,\n              image: convertedGames[0]?.image || '',\n              gameCount: actualGameCount,\n              downloadCount: downloadCount // Add download count for sorting\n            });\n\n          } catch (error) {\n            console.error(`Failed to load ${file}:`, error);\n          }\n        }\n\n        this.romData = {\n          categories,\n          games: allGames,\n          stats: {\n            totalGames: allGames.length,\n            totalCategories: categories.length,\n            totalDownloads: Math.floor(allGames.reduce((sum, game) => sum + game.downloads, 0) / 1000) + \"K\",\n            activeUsers: Math.floor(Math.random() * 50000 + 10000).toLocaleString()\n          }\n        };\n      } catch (error) {\n        console.error(\"Failed to load ROM data:\", error);\n        // Return empty data structure if files don't exist\n        this.romData = {\n          categories: [],\n          games: [],\n          stats: {\n            totalGames: 0,\n            totalCategories: 0,\n            totalDownloads: \"0\",\n            activeUsers: \"0\"\n          }\n        };\n      }\n    }\n    return this.romData;\n  }\n\n  async getRomData(): Promise<RomData> {\n    const data = await this.loadData();\n    if (!data) {\n      throw new Error(\"Failed to load ROM data\");\n    }\n    return data;\n  }\n\n  async getCategories(): Promise<CategoryData[]> {\n    const data = await this.loadData();\n    return data.categories;\n  }\n\n  async getCategory(id: string): Promise<CategoryData | undefined> {\n    const data = await this.loadData();\n    return data.categories.find(cat => cat.id === id);\n  }\n\n  async getGames(params: {\n    categoryId?: string;\n    console?: string;\n    category?: string;\n    search?: string;\n    sortBy?: 'downloads' | 'rating' | 'year' | 'title';\n    page?: number;\n    limit?: number;\n  } = {}): Promise<{ games: GameData[]; total: number }> {\n    const data = await this.loadData();\n    let games = [...data.games];\n\n    // Filter by category ID\n    if (params.categoryId) {\n      games = games.filter(game => game.categoryId === params.categoryId);\n    }\n\n    // Filter by category name\n    if (params.category) {\n      games = games.filter(game => game.category.toLowerCase() === params.category!.toLowerCase());\n    }\n\n    // Filter by console\n    if (params.console) {\n      games = games.filter(game => game.console.toLowerCase() === params.console!.toLowerCase());\n    }\n\n    // Filter by search term\n    if (params.search) {\n      const searchTerm = params.search.toLowerCase();\n      games = games.filter(game => \n        game.title.toLowerCase().includes(searchTerm) ||\n        game.platform.toLowerCase().includes(searchTerm)\n      );\n    }\n\n    // Sort games\n    if (params.sortBy) {\n      games.sort((a, b) => {\n        switch (params.sortBy) {\n          case 'downloads':\n            return b.downloads - a.downloads;\n          case 'rating':\n            return b.rating - a.rating;\n          case 'year':\n            return b.year - a.year;\n          case 'title':\n            return a.title.localeCompare(b.title);\n          default:\n            return 0;\n        }\n      });\n    }\n\n    const total = games.length;\n    \n    // Pagination\n    if (params.page && params.limit) {\n      const start = (params.page - 1) * params.limit;\n      games = games.slice(start, start + params.limit);\n    }\n\n    return { games, total };\n  }\n\n  async getGame(id: string): Promise<GameData | undefined> {\n    const data = await this.loadData();\n    return data.games.find(game => game.id === id);\n  }\n\n  async getPopularGames(limit: number = 4): Promise<GameData[]> {\n    const data = await this.loadData();\n    return [...data.games]\n      .sort((a, b) => b.downloads - a.downloads)\n      .slice(0, limit);\n  }\n\n  async getGameBySlug(console: string, slug: string): Promise<GameData | undefined> {\n    const data = await this.loadData();\n    \n    // Find the game by ID (slug) - the simplest approach\n    return data.games.find(game => game.id === slug);\n  }\n\n  async getConsoles(): Promise<string[]> {\n    const data = await this.loadData();\n    const consolesSet = new Set(data.games.map(game => game.console));\n    const consoles = Array.from(consolesSet);\n    return consoles.sort();\n  }\n\n  private createSlug(fileName: string): string {\n    return fileName\n      .toLowerCase()\n      .replace(/\\.[^/.]+$/, \"\") // Remove file extension\n      .replace(/[^a-z0-9]+/g, \"-\") // Replace non-alphanumeric with hyphens\n      .replace(/^-+|-+$/g, \"\"); // Remove leading/trailing hyphens\n  }\n}\n\nexport const storage = new MemStorage();\n","size_bytes":18784},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2263},"shared/schema.ts":{"content":"import { sql } from \"drizzle-orm\";\nimport { pgTable, text, varchar, integer, real, jsonb } from \"drizzle-orm/pg-core\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\nexport const users = pgTable(\"users\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  username: text(\"username\").notNull().unique(),\n  password: text(\"password\").notNull(),\n});\n\nexport const categories = pgTable(\"categories\", {\n  id: varchar(\"id\").primaryKey(),\n  name: text(\"name\").notNull(),\n  description: text(\"description\").notNull(),\n  image: text(\"image\").notNull(),\n  gameCount: integer(\"game_count\").notNull().default(0),\n});\n\nexport const games = pgTable(\"games\", {\n  id: varchar(\"id\").primaryKey(),\n  title: text(\"title\").notNull(),\n  platform: text(\"platform\").notNull(),\n  console: text(\"console\").notNull(),\n  category: text(\"category\").notNull(),\n  categoryId: varchar(\"category_id\").notNull(),\n  image: text(\"image\").notNull(),\n  rating: real(\"rating\").notNull(),\n  downloads: integer(\"downloads\").notNull().default(0),\n  year: integer(\"year\").notNull(),\n  region: text(\"region\").notNull(),\n  fileName: text(\"file_name\").notNull(),\n  size: text(\"size\").notNull(),\n  downloadUrl: text(\"download_url\").notNull(),\n  description: text(\"description\"),\n  longDescription: text(\"long_description\"),\n  reviewCount: integer(\"review_count\").notNull().default(0),\n});\n\nexport const insertUserSchema = createInsertSchema(users).pick({\n  username: true,\n  password: true,\n});\n\nexport const insertCategorySchema = createInsertSchema(categories).omit({\n  id: true,\n});\n\nexport const insertGameSchema = createInsertSchema(games).omit({\n  id: true,\n});\n\nexport type InsertUser = z.infer<typeof insertUserSchema>;\nexport type User = typeof users.$inferSelect;\nexport type InsertCategory = z.infer<typeof insertCategorySchema>;\nexport type Category = typeof categories.$inferSelect;\nexport type InsertGame = z.infer<typeof insertGameSchema>;\nexport type Game = typeof games.$inferSelect;\n\n// Frontend-only types for JSON data\nexport interface GameData {\n  id: string;\n  title: string;\n  platform: string;\n  console: string;\n  category: string;\n  categoryId: string;\n  image: string;\n  rating: number;\n  downloads: number;\n  year: number;\n  region: string;\n  fileName: string;\n  size: string;\n  downloadUrl: string;\n  description?: string | null;\n  longDescription?: string | null;\n  reviewCount: number;\n}\n\nexport interface CategoryData {\n  id: string;\n  name: string;\n  description: string;\n  image: string;\n  gameCount: number;\n  downloadCount?: number;\n}\n\nexport interface RomData {\n  categories: CategoryData[];\n  games: GameData[];\n  stats: {\n    totalGames: number;\n    totalCategories: number;\n    totalDownloads: string;\n    activeUsers: string;\n  };\n}\n","size_bytes":2775},"client/src/App.tsx":{"content":"import { Switch, Route, useLocation } from \"wouter\";\nimport { useEffect } from \"react\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport { ThemeProvider } from \"@/components/theme/ThemeProvider\";\nimport { Header } from \"@/components/layout/Header\";\nimport { Footer } from \"@/components/layout/Footer\";\nimport Home from \"@/pages/Home\";\nimport Category from \"@/pages/Category\";\nimport Roms from \"@/pages/Roms\";\nimport RomDetail from \"@/pages/RomDetail\";\nimport RomDownload from \"@/pages/RomDownload\";\nimport AllConsoles from \"@/pages/AllConsoles\";\nimport About from \"@/pages/About\";\nimport Contact from \"@/pages/Contact\";\nimport Privacy from \"@/pages/Privacy\";\nimport Terms from \"@/pages/Terms\";\nimport NotFound from \"@/pages/not-found\";\n\nfunction Router() {\n  const [location] = useLocation();\n\n  // Scroll to top on route change\n  useEffect(() => {\n    window.scrollTo(0, 0);\n  }, [location]);\n\n  return (\n    <div className=\"min-h-screen flex flex-col\">\n      <Header />\n      <main className=\"flex-1\">\n        <Switch>\n          <Route path=\"/\" component={Home} />\n          <Route path=\"/all-consoles\" component={AllConsoles} />\n          <Route path=\"/category/:id\" component={Category} />\n          <Route path=\"/roms\" component={Roms} />\n          <Route path=\"/search\" component={Roms} />\n          <Route path=\"/roms/:console\" component={Roms} />\n          <Route path=\"/roms/:console/:slug/download\" component={RomDownload} />\n          <Route path=\"/roms/:console/:slug\" component={RomDetail} />\n          <Route path=\"/about\" component={About} />\n          <Route path=\"/contact\" component={Contact} />\n          <Route path=\"/privacy\" component={Privacy} />\n          <Route path=\"/terms\" component={Terms} />\n          <Route component={NotFound} />\n        </Switch>\n      </main>\n      <Footer />\n    </div>\n  );\n}\n\nfunction App() {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <ThemeProvider>\n        <TooltipProvider>\n          <Toaster />\n          <Router />\n        </TooltipProvider>\n      </ThemeProvider>\n    </QueryClientProvider>\n  );\n}\n\nexport default App;\n","size_bytes":2280},"client/src/index.css":{"content":"@import url('https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css');\n@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n:root {\n  --background: hsl(0 0% 100%);\n  --foreground: hsl(222 84% 5%);\n  --card: hsl(0 0% 100%);\n  --card-foreground: hsl(222 84% 5%);\n  --popover: hsl(0 0% 100%);\n  --popover-foreground: hsl(222 84% 5%);\n  --primary: hsl(262 83% 58%);\n  --primary-foreground: hsl(210 40% 98%);\n  --secondary: hsl(210 40% 96%);\n  --secondary-foreground: hsl(222 47% 11%);\n  --muted: hsl(210 40% 96%);\n  --muted-foreground: hsl(215 16% 47%);\n  --accent: hsl(210 40% 96%);\n  --accent-foreground: hsl(222 47% 11%);\n  --destructive: hsl(0 84% 60%);\n  --destructive-foreground: hsl(210 40% 98%);\n  --border: hsl(214 32% 91%);\n  --input: hsl(214 32% 91%);\n  --ring: hsl(262 83% 58%);\n  --sidebar: hsl(180 6.6667% 97.0588%);\n  --sidebar-foreground: hsl(210 25% 7.8431%);\n  --sidebar-primary: hsl(203.8863 88.2845% 53.1373%);\n  --sidebar-primary-foreground: hsl(0 0% 100%);\n  --sidebar-accent: hsl(211.5789 51.3514% 92.7451%);\n  --sidebar-accent-foreground: hsl(203.8863 88.2845% 53.1373%);\n  --sidebar-border: hsl(205.0000 25.0000% 90.5882%);\n  --sidebar-ring: hsl(202.8169 89.1213% 53.1373%);\n  --font-sans: Inter, system-ui, sans-serif;\n  --font-serif: Georgia, serif;\n  --font-mono: Menlo, monospace;\n  --radius: 0.75rem;\n}\n\n.dark {\n  --background: hsl(222 84% 5%);\n  --foreground: hsl(210 40% 98%);\n  --card: hsl(222 84% 5%);\n  --card-foreground: hsl(210 40% 98%);\n  --popover: hsl(222 84% 5%);\n  --popover-foreground: hsl(210 40% 98%);\n  --primary: hsl(262 83% 58%);\n  --primary-foreground: hsl(210 40% 98%);\n  --secondary: hsl(217 33% 17%);\n  --secondary-foreground: hsl(210 40% 98%);\n  --muted: hsl(217 33% 17%);\n  --muted-foreground: hsl(215 20% 65%);\n  --accent: hsl(217 33% 17%);\n  --accent-foreground: hsl(210 40% 98%);\n  --destructive: hsl(0 62% 30%);\n  --destructive-foreground: hsl(210 40% 98%);\n  --border: hsl(217 33% 17%);\n  --input: hsl(217 33% 17%);\n  --ring: hsl(262 83% 58%);\n  --sidebar: hsl(228 9.8039% 10%);\n  --sidebar-foreground: hsl(0 0% 85.0980%);\n  --sidebar-primary: hsl(262 83% 58%);\n  --sidebar-primary-foreground: hsl(210 40% 98%);\n  --sidebar-accent: hsl(217 33% 17%);\n  --sidebar-accent-foreground: hsl(210 40% 98%);\n  --sidebar-border: hsl(205.7143 15.7895% 26.0784%);\n  --sidebar-ring: hsl(262 83% 58%);\n  --font-sans: Inter, system-ui, sans-serif;\n  --font-serif: Georgia, serif;\n  --font-mono: Menlo, monospace;\n  --radius: 0.75rem;\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply font-sans antialiased bg-background text-foreground;\n  }\n\n  .game-card {\n    transition: all 0.2s ease-in-out;\n  }\n\n  .game-card:hover {\n    transform: translateY(-4px);\n  }\n\n  .star-rating {\n    color: #fbbf24;\n  }\n\n  .loading-skeleton {\n    background: linear-gradient(90deg, \n        hsl(var(--muted)) 25%, \n        hsl(var(--accent)) 50%, \n        hsl(var(--muted)) 75%);\n    background-size: 200% 100%;\n    animation: loading 1.5s infinite;\n  }\n\n  @keyframes loading {\n    0% { background-position: 200% 0; }\n    100% { background-position: -200% 0; }\n  }\n\n  .hero-gradient {\n    background: linear-gradient(135deg, hsl(200 100% 85%) 0%, hsl(210 100% 90%) 100%);\n    color: hsl(220 90% 20%);\n  }\n  \n  .dark .hero-gradient {\n    background: linear-gradient(135deg, hsl(200 80% 30%) 0%, hsl(210 85% 35%) 100%);\n    color: white;\n  }\n  \n  .hero-fullwidth {\n    margin-left: calc(-50vw + 50%);\n    margin-right: calc(-50vw + 50%);\n    width: 100vw;\n  }\n}\n","size_bytes":3530},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/hooks/useTheme.ts":{"content":"import { useState, useEffect } from \"react\";\n\nexport function useTheme() {\n  const [theme, setTheme] = useState<\"light\" | \"dark\">(\"dark\");\n\n  useEffect(() => {\n    // Check for saved theme preference or default to dark\n    const savedTheme = localStorage.getItem(\"theme\") as \"light\" | \"dark\" | null;\n    const prefersDark = window.matchMedia(\"(prefers-color-scheme: dark)\").matches;\n    const initialTheme = savedTheme || (prefersDark ? \"dark\" : \"light\");\n    \n    setTheme(initialTheme);\n    document.documentElement.classList.remove(\"light\", \"dark\");\n    document.documentElement.classList.add(initialTheme);\n  }, []);\n\n  const toggleTheme = () => {\n    const newTheme = theme === \"light\" ? \"dark\" : \"light\";\n    setTheme(newTheme);\n    localStorage.setItem(\"theme\", newTheme);\n    document.documentElement.classList.remove(\"light\", \"dark\");\n    document.documentElement.classList.add(newTheme);\n  };\n\n  return { theme, toggleTheme };\n}\n","size_bytes":939},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const res = await fetch(url, {\n    method,\n    headers: data ? { \"Content-Type\": \"application/json\" } : {},\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const res = await fetch(queryKey.join(\"/\") as string, {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1383},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"client/src/pages/Category.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { useRoute, Link } from \"wouter\";\nimport { ArrowLeft } from \"lucide-react\";\nimport { GameCard } from \"@/components/game/GameCard\";\nimport { SearchBar } from \"@/components/game/SearchBar\";\nimport { Button } from \"@/components/ui/button\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Skeleton } from \"@/components/ui/skeleton\";\nimport type { CategoryData, GameData } from \"@shared/schema\";\n\nexport default function Category() {\n  const [match, params] = useRoute(\"/category/:id\");\n  const [search, setSearch] = useState(\"\");\n  const [sortBy, setSortBy] = useState<\"downloads\" | \"rating\" | \"year\" | \"title\">(\"downloads\");\n  const [currentPage, setCurrentPage] = useState(1);\n  const limit = 20;\n\n  const { data: category } = useQuery<CategoryData>({\n    queryKey: [\"/api/categories\", params?.id],\n    enabled: !!params?.id,\n  });\n\n  const { data: gamesData, isLoading } = useQuery<{ games: GameData[]; total: number }>({\n    queryKey: [\"/api/games\", params?.id, search, sortBy, currentPage, limit],\n    queryFn: async () => {\n      const queryParams = new URLSearchParams();\n      if (params?.id) queryParams.append('categoryId', params.id);\n      if (search) queryParams.append('search', search);\n      queryParams.append('sortBy', sortBy);\n      queryParams.append('page', currentPage.toString());\n      queryParams.append('limit', limit.toString());\n      \n      const response = await fetch(`/api/games?${queryParams.toString()}`);\n      if (!response.ok) throw new Error('Failed to fetch games');\n      return response.json();\n    },\n    enabled: !!params?.id,\n  });\n\n  // Reset page when search or sort changes\n  useEffect(() => {\n    setCurrentPage(1);\n  }, [search, sortBy]);\n\n  if (!match || !params?.id) {\n    return <div>Category not found</div>;\n  }\n\n  const totalPages = gamesData ? Math.ceil(gamesData.total / limit) : 0;\n  const startIndex = (currentPage - 1) * limit + 1;\n  const endIndex = Math.min(startIndex + limit - 1, gamesData?.total || 0);\n\n  return (\n    <div className=\"container mx-auto px-4 py-8 space-y-8\">\n      {/* Category Header */}\n      <div className=\"flex items-center space-x-4 mb-8\">\n        <Link to=\"/\">\n          <Button \n            variant=\"secondary\" \n            size=\"sm\"\n            className=\"p-2\"\n            data-testid=\"button-back-home\"\n          >\n            <ArrowLeft className=\"h-4 w-4\" />\n          </Button>\n        </Link>\n        <div>\n          <h1 className=\"text-4xl font-bold\" data-testid=\"text-category-name\">\n            {category?.name || \"Loading...\"}\n          </h1>\n          <p className=\"text-muted-foreground mt-2\" data-testid=\"text-category-description\">\n            {category?.description} {category && `- ${category.gameCount.toLocaleString()} games available`}\n          </p>\n        </div>\n      </div>\n\n      {/* Filters and Search */}\n      <div className=\"flex flex-col md:flex-row gap-4 mb-8\">\n        <div className=\"flex-1\">\n          <SearchBar \n            onSearch={setSearch}\n            placeholder=\"Search games in this category...\"\n            className=\"w-full\"\n          />\n        </div>\n        <Select value={sortBy} onValueChange={(value: any) => setSortBy(value)}>\n          <SelectTrigger className=\"w-48\" data-testid=\"select-sort-by\">\n            <SelectValue placeholder=\"Sort by\" />\n          </SelectTrigger>\n          <SelectContent>\n            <SelectItem value=\"downloads\">Sort by Downloads</SelectItem>\n            <SelectItem value=\"rating\">Sort by Rating</SelectItem>\n            <SelectItem value=\"year\">Sort by Year</SelectItem>\n            <SelectItem value=\"title\">Sort by Title</SelectItem>\n          </SelectContent>\n        </Select>\n      </div>\n\n      {/* Games Grid */}\n      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6\">\n        {isLoading ? (\n          Array.from({ length: 8 }).map((_, i) => (\n            <div key={i} className=\"loading-skeleton rounded-lg h-80\" />\n          ))\n        ) : gamesData && gamesData.games.length > 0 ? (\n          gamesData.games.map(game => (\n            <GameCard key={game.id} game={game} />\n          ))\n        ) : (\n          <div className=\"col-span-full text-center py-12\">\n            <p className=\"text-muted-foreground\" data-testid=\"text-no-games\">\n              {search ? `No games found matching \"${search}\"` : \"No games found in this category\"}\n            </p>\n          </div>\n        )}\n      </div>\n\n      {/* Pagination */}\n      {gamesData && gamesData.total > limit && (\n        <div className=\"flex items-center justify-between mt-12\">\n          <div className=\"text-muted-foreground\" data-testid=\"text-pagination-info\">\n            Showing {startIndex}-{endIndex} of {gamesData.total.toLocaleString()} games\n          </div>\n          <div className=\"flex items-center space-x-2\">\n            <Button\n              variant=\"outline\"\n              size=\"sm\"\n              onClick={() => setCurrentPage(Math.max(1, currentPage - 1))}\n              disabled={currentPage === 1}\n              data-testid=\"button-pagination-prev\"\n            >\n              Previous\n            </Button>\n            \n            {/* Page numbers */}\n            {Array.from({ length: Math.min(5, totalPages) }, (_, i) => {\n              let pageNum;\n              if (totalPages <= 5) {\n                pageNum = i + 1;\n              } else if (currentPage <= 3) {\n                pageNum = i + 1;\n              } else if (currentPage >= totalPages - 2) {\n                pageNum = totalPages - 4 + i;\n              } else {\n                pageNum = currentPage - 2 + i;\n              }\n\n              const isActive = pageNum === currentPage;\n              \n              return (\n                <Button\n                  key={pageNum}\n                  variant={isActive ? \"default\" : \"outline\"}\n                  size=\"sm\"\n                  onClick={() => setCurrentPage(pageNum)}\n                  data-testid={`button-pagination-${pageNum}`}\n                >\n                  {pageNum}\n                </Button>\n              );\n            })}\n\n            <Button\n              variant=\"outline\"\n              size=\"sm\"\n              onClick={() => setCurrentPage(Math.min(totalPages, currentPage + 1))}\n              disabled={currentPage === totalPages}\n              data-testid=\"button-pagination-next\"\n            >\n              Next\n            </Button>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n}\n","size_bytes":6585},"client/src/pages/GameDetail.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { useRoute, Link } from \"wouter\";\nimport { ArrowLeft, Download } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Skeleton } from \"@/components/ui/skeleton\";\nimport type { GameData } from \"@shared/schema\";\n\nexport default function GameDetail() {\n  const [match, params] = useRoute(\"/game/:id\");\n  \n  const { data: game, isLoading } = useQuery<GameData>({\n    queryKey: [\"/api/games\", params?.id],\n    enabled: !!params?.id,\n  });\n\n  if (!match || !params?.id) {\n    return <div>Game not found</div>;\n  }\n\n  if (isLoading) {\n    return (\n      <div className=\"container mx-auto px-4 py-8\">\n        <div className=\"flex items-center space-x-4 mb-8\">\n          <Skeleton className=\"h-10 w-10\" />\n          <div className=\"space-y-2\">\n            <Skeleton className=\"h-10 w-96\" />\n            <Skeleton className=\"h-6 w-64\" />\n          </div>\n        </div>\n        <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-8\">\n          <div className=\"lg:col-span-1\">\n            <Skeleton className=\"w-full aspect-[3/4] rounded-lg mb-4\" />\n            <Skeleton className=\"w-full h-64 rounded-lg\" />\n          </div>\n          <div className=\"lg:col-span-2 space-y-6\">\n            <Skeleton className=\"w-full h-48 rounded-lg\" />\n            <Skeleton className=\"w-full h-64 rounded-lg\" />\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  if (!game) {\n    return (\n      <div className=\"container mx-auto px-4 py-8\">\n        <div className=\"text-center py-12\">\n          <h1 className=\"text-2xl font-bold mb-4\">Game not found</h1>\n          <p className=\"text-muted-foreground mb-4\">The requested game could not be found.</p>\n          <Link to=\"/\">\n            <Button data-testid=\"button-back-home\">Return Home</Button>\n          </Link>\n        </div>\n      </div>\n    );\n  }\n\n  const renderStars = (rating: number) => {\n    const fullStars = Math.floor(rating);\n    const hasHalfStar = rating % 1 >= 0.5;\n    const emptyStars = 5 - fullStars - (hasHalfStar ? 1 : 0);\n    \n    return (\n      <span className=\"star-rating\">\n        {\"★\".repeat(fullStars)}\n        {hasHalfStar && \"☆\"}\n        {\"☆\".repeat(emptyStars)}\n      </span>\n    );\n  };\n\n  const handleDownload = () => {\n    if (game.downloadUrl) {\n      window.open(game.downloadUrl, '_blank');\n    }\n  };\n\n  return (\n    <div className=\"container mx-auto px-4 py-8 space-y-8\">\n      {/* Game Header */}\n      <div className=\"flex items-center space-x-4 mb-8\">\n        <Link to={`/category/${game.categoryId}`}>\n          <Button \n            variant=\"secondary\" \n            size=\"sm\"\n            className=\"p-2\"\n            data-testid=\"button-back-category\"\n          >\n            <ArrowLeft className=\"h-4 w-4\" />\n          </Button>\n        </Link>\n        <div>\n          <h1 className=\"text-4xl font-bold\" data-testid=\"text-game-title\">\n            {game.title}\n          </h1>\n          <p className=\"text-muted-foreground mt-2\" data-testid=\"text-game-meta\">\n            <span>{game.platform}</span> • \n            <span> {game.year}</span> • \n            <span> {game.region}</span>\n          </p>\n        </div>\n      </div>\n\n      <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-8\">\n        {/* Game Image and Downloads */}\n        <div className=\"lg:col-span-1\">\n          <img \n            src={game.image}\n            alt={`${game.title} gameplay screenshot`}\n            className=\"w-full rounded-lg shadow-lg mb-4\"\n          />\n          \n          {/* Download Section */}\n          <Card>\n            <CardContent className=\"p-6\">\n              <h3 className=\"text-xl font-semibold mb-4\" data-testid=\"text-download-info\">\n                Download Information\n              </h3>\n              <div className=\"space-y-3 mb-6\">\n                <div className=\"flex justify-between\">\n                  <span className=\"text-muted-foreground\">File Name:</span>\n                  <span data-testid=\"text-file-name\">{game.fileName}</span>\n                </div>\n                <div className=\"flex justify-between\">\n                  <span className=\"text-muted-foreground\">File Size:</span>\n                  <span data-testid=\"text-file-size\">{game.size}</span>\n                </div>\n                <div className=\"flex justify-between\">\n                  <span className=\"text-muted-foreground\">Downloads:</span>\n                  <span data-testid=\"text-download-count\">{game.downloads.toLocaleString()}</span>\n                </div>\n                <div className=\"flex justify-between\">\n                  <span className=\"text-muted-foreground\">Console:</span>\n                  <span data-testid=\"text-console\">{game.console}</span>\n                </div>\n              </div>\n              <Button \n                onClick={handleDownload}\n                className=\"w-full font-semibold\"\n                data-testid=\"button-download-rom\"\n              >\n                <Download className=\"mr-2 h-4 w-4\" />\n                Download ROM\n              </Button>\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* Game Details */}\n        <div className=\"lg:col-span-2\">\n          {/* Rating and Stats */}\n          <Card className=\"mb-6\">\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center justify-between mb-4\">\n                <div className=\"flex items-center space-x-4\">\n                  <div className=\"flex items-center space-x-2\">\n                    <span className=\"text-2xl\">{renderStars(game.rating)}</span>\n                    <span className=\"text-2xl font-bold\" data-testid=\"text-rating-value\">\n                      {game.rating}\n                    </span>\n                  </div>\n                  <div className=\"text-muted-foreground\" data-testid=\"text-review-count\">\n                    Based on {game.reviewCount.toLocaleString()} reviews\n                  </div>\n                </div>\n                <div className=\"text-right\">\n                  <div className=\"text-2xl font-bold text-primary\" data-testid=\"text-total-downloads\">\n                    {(game.downloads / 1000).toFixed(1)}K\n                  </div>\n                  <div className=\"text-muted-foreground\">Downloads</div>\n                </div>\n              </div>\n              \n              {/* Rating Breakdown */}\n              <div className=\"space-y-2\">\n                {[5, 4, 3, 2, 1].map(star => {\n                  // Simple distribution calculation based on rating\n                  const percentage = star === Math.floor(game.rating) ? \n                    (game.rating >= 4.5 ? 78 : 65) : \n                    (star > game.rating ? Math.max(0, 15 - (star - game.rating) * 10) : 5);\n                  \n                  return (\n                    <div key={star} className=\"flex items-center space-x-2\">\n                      <span className=\"text-sm w-8\">{star}★</span>\n                      <div className=\"flex-1 bg-muted rounded-full h-2\">\n                        <div \n                          className=\"bg-primary h-2 rounded-full\" \n                          style={{ width: `${percentage}%` }}\n                        ></div>\n                      </div>\n                      <span className=\"text-sm text-muted-foreground w-12\">{percentage}%</span>\n                    </div>\n                  );\n                })}\n              </div>\n            </CardContent>\n          </Card>\n\n          {/* Game Description */}\n          {game.description && (\n            <Card className=\"mb-6\">\n              <CardContent className=\"p-6\">\n                <h3 className=\"text-xl font-semibold mb-4\" data-testid=\"text-about-game\">\n                  About This Game\n                </h3>\n                <p className=\"text-muted-foreground leading-relaxed mb-4\" data-testid=\"text-game-description\">\n                  {game.description}\n                </p>\n                {game.longDescription && (\n                  <p className=\"text-muted-foreground leading-relaxed\" data-testid=\"text-game-long-description\">\n                    {game.longDescription}\n                  </p>\n                )}\n              </CardContent>\n            </Card>\n          )}\n\n          {/* Technical Information */}\n          <Card>\n            <CardContent className=\"p-6\">\n              <h3 className=\"text-xl font-semibold mb-4\" data-testid=\"text-technical-specs\">\n                Technical Specifications\n              </h3>\n              <div className=\"grid grid-cols-2 gap-4\">\n                <div>\n                  <div className=\"text-muted-foreground text-sm\">Platform</div>\n                  <div className=\"font-semibold\" data-testid=\"text-spec-platform\">{game.platform}</div>\n                </div>\n                <div>\n                  <div className=\"text-muted-foreground text-sm\">Console</div>\n                  <div className=\"font-semibold\" data-testid=\"text-spec-console\">{game.console}</div>\n                </div>\n                <div>\n                  <div className=\"text-muted-foreground text-sm\">Category</div>\n                  <div className=\"font-semibold\" data-testid=\"text-spec-category\">{game.category}</div>\n                </div>\n                <div>\n                  <div className=\"text-muted-foreground text-sm\">Region</div>\n                  <div className=\"font-semibold\" data-testid=\"text-spec-region\">{game.region}</div>\n                </div>\n                <div>\n                  <div className=\"text-muted-foreground text-sm\">Release Year</div>\n                  <div className=\"font-semibold\" data-testid=\"text-spec-year\">{game.year}</div>\n                </div>\n                <div>\n                  <div className=\"text-muted-foreground text-sm\">File Format</div>\n                  <div className=\"font-semibold\" data-testid=\"text-spec-format\">\n                    {game.fileName.split('.').pop()?.toUpperCase()}\n                  </div>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":10134},"client/src/pages/Home.tsx":{"content":"import { useEffect } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Link } from \"wouter\";\nimport { GameCard } from \"@/components/game/GameCard\";\nimport { SearchBar } from \"@/components/game/SearchBar\";\nimport { AdSense } from \"@/components/AdSense\";\nimport { Skeleton } from \"@/components/ui/skeleton\";\nimport type { RomData, GameData } from \"@shared/schema\";\n\nexport default function Home() {\n  const { data: romData, isLoading } = useQuery<RomData>({\n    queryKey: [\"/api/rom-data\"],\n  });\n\n  const { data: popularGames, isLoading: isLoadingPopular } = useQuery<GameData[]>({\n    queryKey: [\"/api/popular\"],\n  });\n\n  // Set SEO meta tags\n  useEffect(() => {\n    document.title = \"Emulator Games.net | Download ROMs and Emulators For Free (2025)\";\n    \n    const metaDescription = document.querySelector('meta[name=\"description\"]');\n    if (metaDescription) {\n      metaDescription.setAttribute('content', \n        \"Download 100% working ROMs and emulators only at Emulator Games.net in 2025. Emulator Games offer Free classic games to play offline.\"\n      );\n    }\n  }, []);\n\n  // Show hero section immediately, handle data loading gracefully\n\n  return (\n    <div className=\"space-y-12\">\n      {/* Hero Section - Full Width */}\n      <section className=\"hero-gradient hero-fullwidth py-16 px-4 text-center\">\n        <div className=\"container mx-auto max-w-4xl\">\n          <h1 className=\"text-2xl md:text-3xl lg:text-4xl font-bold mb-4\" data-testid=\"text-hero-title\">\n            <a href=\"https://www.emulator-games.net/\" className=\"hover:text-blue-200 transition-colors\">\n              Emulator Games\n            </a> | Download ROMs & Emulators For Free (2025)\n          </h1>\n          <p className=\"text-lg md:text-xl mb-8 opacity-80 max-w-3xl mx-auto\" data-testid=\"text-hero-description\">\n            Download 100% working ROMs and emulators only at Emulator-Games.net in 2025. Emulator Games offer Free classic games to play offline.\n            Download ROMs PS3, GBA, PS1, SNES, N64, PS2, and more. Enjoy retro gaming easily at Emulator Games.\n          </p>\n          <div className=\"flex flex-col sm:flex-row gap-4 justify-center mb-8\">\n            <Link to=\"/all-consoles\">\n              <button \n                className=\"px-8 py-3 bg-white text-sky-800 font-semibold rounded-lg hover:bg-white/90 transition-colors shadow-lg\"\n                data-testid=\"button-browse-categories\"\n              >\n                Browse Categories\n              </button>\n            </Link>\n            <Link to=\"/roms\">\n              <button \n                className=\"px-8 py-3 border-2 border-sky-800 text-sky-800 bg-white/20 font-semibold rounded-lg hover:bg-white/30 transition-colors\"\n                data-testid=\"button-popular-games\"\n              >\n                Popular Games\n              </button>\n            </Link>\n          </div>\n          \n          {/* Search Bar */}\n          <div className=\"w-full max-w-2xl mx-auto\">\n            <SearchBar \n              placeholder=\"Search for games, consoles, or emulators...\"\n              className=\"w-full\"\n            />\n          </div>\n          \n          {/* AdSense Ad */}\n          <div className=\"w-full max-w-2xl mx-auto mt-8\">\n            <AdSense adSlot=\"1048373308\" />\n          </div>\n        </div>\n      </section>\n\n      <div className=\"container mx-auto px-4 space-y-12\">\n\n      {/* Popular Games Section */}\n      <section>\n        <div className=\"flex items-center justify-between mb-8\">\n          <h2 className=\"text-3xl font-bold text-foreground\" data-testid=\"text-popular-games\">Popular Games</h2>\n          <Link to=\"/roms\" className=\"text-primary hover:underline\" data-testid=\"link-view-all-popular\">\n            View All →\n          </Link>\n        </div>\n        \n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-5 gap-6\">\n          {isLoadingPopular ? (\n            Array.from({ length: 10 }).map((_, i) => (\n              <div key={i} className=\"loading-skeleton rounded-lg h-80\" />\n            ))\n          ) : popularGames && popularGames.length > 0 ? (\n            popularGames.slice(0, 10).map((game, index) => (\n              <GameCard key={`${game.id}-${game.platform}-${index}`} game={game} />\n            ))\n          ) : (\n            <div className=\"col-span-full text-center py-8\">\n              <p className=\"text-muted-foreground\">Loading popular games...</p>\n            </div>\n          )}\n        </div>\n      </section>\n\n      {/* Stats Section */}\n      {romData ? (\n        <section className=\"grid grid-cols-2 md:grid-cols-4 gap-6\">\n          <div className=\"bg-card border border-border rounded-lg p-6 text-center\">\n            <div className=\"text-3xl font-bold text-primary mb-2\" data-testid=\"text-stat-total-games\">\n              {romData.stats.totalGames.toLocaleString()}\n            </div>\n            <div className=\"text-foreground/80\">Total Games</div>\n          </div>\n          <div className=\"bg-card border border-border rounded-lg p-6 text-center\">\n            <div className=\"text-3xl font-bold text-primary mb-2\" data-testid=\"text-stat-platforms\">\n              {romData.stats.totalCategories}\n            </div>\n            <div className=\"text-foreground/80\">Platforms</div>\n          </div>\n          <div className=\"bg-card border border-border rounded-lg p-6 text-center\">\n            <div className=\"text-3xl font-bold text-primary mb-2\" data-testid=\"text-stat-downloads\">\n              {romData.stats.totalDownloads}\n            </div>\n            <div className=\"text-foreground/80\">Downloads</div>\n          </div>\n          <div className=\"bg-card border border-border rounded-lg p-6 text-center\">\n            <div className=\"text-3xl font-bold text-primary mb-2\" data-testid=\"text-stat-active-users\">\n              {romData.stats.activeUsers}\n            </div>\n            <div className=\"text-foreground/80\">Active Users</div>\n          </div>\n        </section>\n      ) : isLoading ? (\n        <section className=\"grid grid-cols-2 md:grid-cols-4 gap-6\">\n          {Array.from({ length: 4 }).map((_, i) => (\n            <div key={i} className=\"bg-card border border-border rounded-lg p-6 text-center\">\n              <div className=\"loading-skeleton h-8 w-16 mx-auto mb-2\" />\n              <div className=\"loading-skeleton h-4 w-20 mx-auto\" />\n            </div>\n          ))}\n        </section>\n      ) : null}\n\n      {/* Content Section */}\n      <section className=\"prose prose-lg max-w-none\">\n        <h2 className=\"text-3xl font-bold mb-6 text-foreground\">2025's Best ROMs & Emulators at Emulator Games.net</h2>\n        \n        <p className=\"text-lg text-foreground/80 mb-8\">\n          In the world of retro gaming, finding a reliable platform to download ROMs and emulators can be a challenge. With Emulator Games.net, your search ends here. This website is a one-stop destination for gaming enthusiasts who want to relive the golden era of classic games. Whether you're a fan of Nintendo, PlayStation, Sega, or other consoles, Emulator Games has something for everyone. In this article, we'll explore why EmulatorGames is the best choice for gamers in 2025.\n        </p>\n\n        <h3 className=\"text-2xl font-semibold mb-4 text-foreground\">What is EmulatorGames?</h3>\n        \n        <p className=\"text-foreground/80 mb-6\">\n          <Link to=\"/\" className=\"text-primary hover:underline\">Emulator Games</Link> is a platform dedicated to providing 100% working ROMs and emulators. It serves as a bridge between the nostalgic world of classic gaming and the modern-day gamer. With an extensive library of games and emulators, the website ensures you can play your favourite titles from any console, anytime, anywhere.\n        </p>\n\n        <h4 className=\"text-xl font-semibold mb-4 text-foreground\">Key Features of Emulator Games</h4>\n        \n        <ol className=\"list-decimal list-inside space-y-4 text-foreground/80 mb-8\">\n          <li>\n            <strong className=\"text-foreground\">Wide Range of ROMs</strong><br />\n            The platform offers a vast collection of ROMs for various consoles, including:\n            <ul className=\"list-disc list-inside ml-4 mt-2 space-y-1\">\n              <li>NES (Nintendo Entertainment System)</li>\n              <li>SNES (Super Nintendo Entertainment System)</li>\n              <li>GBA (Game Boy Advance)</li>\n              <li>PlayStation</li>\n              <li>Sega Genesis</li>\n            </ul>\n          </li>\n          <li>\n            <strong className=\"text-foreground\">Reliable Emulators</strong><br />\n            EmulatorGames provides emulators that are:\n            <ul className=\"list-disc list-inside ml-4 mt-2 space-y-1\">\n              <li>User-friendly</li>\n              <li>Highly compatible</li>\n              <li>Lightweight</li>\n              <li>Regularly updated</li>\n            </ul>\n          </li>\n          <li>\n            <strong className=\"text-foreground\">Safe and Secure Downloads</strong><br />\n            All downloads are free from malware and viruses, ensuring a safe gaming experience.\n          </li>\n          <li>\n            <strong className=\"text-foreground\">Cross-Platform Compatibility</strong><br />\n            Whether you're using Windows, macOS, Android, or iOS, the platform's emulators and ROMs are designed to work seamlessly on all major operating systems.\n          </li>\n          <li>\n            <strong className=\"text-foreground\">Community Support</strong><br />\n            The website features forums and a help centre where users can connect, share tips, and resolve issues.\n          </li>\n        </ol>\n\n        <h3 className=\"text-2xl font-semibold mb-4 text-foreground\">Why Choose Emulator Games.Net?</h3>\n        \n        <p className=\"text-foreground/80 mb-6\">\n          With countless websites offering ROMs and emulators, Emulator Games stands out for several reasons:\n        </p>\n\n        <div className=\"space-y-6 mb-8\">\n          <div>\n            <h4 className=\"text-lg font-semibold mb-2 text-foreground\">1. 100% Working Downloads</h4>\n            <p className=\"text-foreground/80\">\n              EmulatorGames.net takes pride in offering ROMs and emulators that work flawlessly. Every file is tested to ensure it delivers a smooth gaming experience.\n            </p>\n          </div>\n          \n          <div>\n            <h4 className=\"text-lg font-semibold mb-2 text-foreground\">2. Free Access</h4>\n            <p className=\"text-foreground/80\">\n              Unlike many platforms that charge for downloads, Emulator Games is completely free. You can download as many ROMs and emulators as you want without spending a dime.\n            </p>\n          </div>\n          \n          <div>\n            <h4 className=\"text-lg font-semibold mb-2 text-foreground\">3. User-Friendly Interface</h4>\n            <p className=\"text-foreground/80\">\n              The website's clean and intuitive design makes it easy for users to find and download their favourite games and emulators. Categories and search filters simplify the process.\n            </p>\n          </div>\n          \n          <div>\n            <h4 className=\"text-lg font-semibold mb-2 text-foreground\">4. Regular Updates</h4>\n            <p className=\"text-foreground/80\">\n              The team behind EmulatorGames is dedicated to keeping the library updated with the latest ROMs and emulator versions. This ensures you always have access to the best tools for retro gaming.\n            </p>\n          </div>\n        </div>\n\n        <h3 className=\"text-2xl font-semibold mb-4 text-foreground\">How to Use Emulator Games</h3>\n        \n        <p className=\"text-foreground/80 mb-4\">\n          Getting started with Emulator Games is simple. Here's a step-by-step guide:\n        </p>\n        \n        <div className=\"space-y-4 mb-8\">\n          <div>\n            <h4 className=\"text-lg font-semibold mb-2 text-foreground\">Step 1: Visit the Website</h4>\n            <p className=\"text-foreground/80\">\n              Navigate to <Link to=\"/\" className=\"text-primary hover:underline\">Emulator-Games.net</Link> on your browser.\n            </p>\n          </div>\n          \n          <div>\n            <h4 className=\"text-lg font-semibold mb-2 text-foreground\">Step 2: Search for a ROM or Emulator</h4>\n            <p className=\"text-foreground/80\">\n              Use the search bar to find the ROM or emulator you're looking for. You can also browse through categories for inspiration.\n            </p>\n          </div>\n          \n          <div>\n            <h4 className=\"text-lg font-semibold mb-2 text-foreground\">Step 3: Download the File</h4>\n            <p className=\"text-foreground/80\">\n              Click on the desired ROM or emulator, and hit the download button. Files are typically small, so downloads are quick.\n            </p>\n          </div>\n          \n          <div>\n            <h4 className=\"text-lg font-semibold mb-2 text-foreground\">Step 4: Install and Play</h4>\n            <p className=\"text-foreground/80\">\n              Install the emulator on your device, load the ROM, and start playing your favorite classic games.\n            </p>\n          </div>\n        </div>\n\n        <h3 className=\"text-2xl font-semibold mb-4 text-foreground\">Popular ROMs and Emulators on Emulator Games.net</h3>\n        \n        <div className=\"grid md:grid-cols-2 gap-8 mb-8\">\n          <div>\n            <h4 className=\"text-lg font-semibold mb-3 text-foreground\">Top ROMs:</h4>\n            <ul className=\"list-disc list-inside space-y-2 text-foreground/80\">\n              <li><strong className=\"text-foreground\">Super Mario Bros.</strong> (NES)</li>\n              <li><strong className=\"text-foreground\">The Legend of Zelda: A Link to the Past</strong> (SNES)</li>\n              <li><strong className=\"text-foreground\">Pokémon FireRed</strong> (GBA)</li>\n              <li><strong className=\"text-foreground\">Final Fantasy VII</strong> (PlayStation)</li>\n              <li><strong className=\"text-foreground\">Sonic the Hedgehog</strong> (Sega Genesis)</li>\n            </ul>\n          </div>\n          \n          <div>\n            <h4 className=\"text-lg font-semibold mb-3 text-foreground\">Top Emulators:</h4>\n            <ul className=\"list-disc list-inside space-y-2 text-foreground/80\">\n              <li><strong className=\"text-foreground\">Dolphin Emulator</strong> (GameCube/Wii)</li>\n              <li><strong className=\"text-foreground\">PCSX2</strong> (PlayStation 2)</li>\n              <li><strong className=\"text-foreground\">ePSXe</strong> (PlayStation 1)</li>\n              <li><strong className=\"text-foreground\">VisualBoyAdvance</strong> (GBA)</li>\n              <li><strong className=\"text-foreground\">RetroArch</strong> (Multi-platform)</li>\n            </ul>\n          </div>\n        </div>\n\n        <h3 className=\"text-2xl font-semibold mb-4 text-foreground\">Tips for a Better Gaming Experience</h3>\n        \n        <ol className=\"list-decimal list-inside space-y-3 text-foreground/80 mb-8\">\n          <li>\n            <strong className=\"text-foreground\">Check System Requirements</strong><br />\n            Ensure your device meets the minimum requirements for the emulator you're using.\n          </li>\n          <li>\n            <strong className=\"text-foreground\">Use a Controller</strong><br />\n            For an authentic experience, connect a game controller to your device.\n          </li>\n          <li>\n            <strong className=\"text-foreground\">Save Progress</strong><br />\n            Most emulators allow you to save your game progress. Use this feature to avoid starting over.\n          </li>\n          <li>\n            <strong className=\"text-foreground\">Stay Updated</strong><br />\n            Regularly check for updates to your emulator for improved performance and compatibility.\n          </li>\n          <li>\n            <strong className=\"text-foreground\">Join the Community</strong><br />\n            Participate in forums to get tips, share experiences, and connect with fellow gamers.\n          </li>\n        </ol>\n\n        <h3 className=\"text-2xl font-semibold mb-4 text-foreground\">Frequently Asked Questions</h3>\n        \n        <div className=\"space-y-6 mb-8\">\n          <div>\n            <h4 className=\"text-lg font-semibold mb-2 text-foreground\">Is Emulatorgames.net safe?</h4>\n            <p className=\"text-foreground/80\">\n              Emulatorgames.net is a safe website to download or play ROMs games online!\n            </p>\n          </div>\n          \n          <div>\n            <h4 className=\"text-lg font-semibold mb-2 text-foreground\">Are the downloads really free?</h4>\n            <p className=\"text-foreground/80\">\n              Yes, all ROMs and emulators on Emulator Games are completely free to download and use.\n            </p>\n          </div>\n          \n          <div>\n            <h4 className=\"text-lg font-semibold mb-2 text-foreground\">Do I need to register to download?</h4>\n            <p className=\"text-foreground/80\">\n              No registration is required. You can browse and download games immediately without creating an account.\n            </p>\n          </div>\n        </div>\n\n        <h3 className=\"text-2xl font-semibold mb-4 text-foreground\">Conclusion</h3>\n        \n        <p className=\"text-foreground/80\">\n          Emulator Games is the ultimate hub for retro gaming enthusiasts in 2025. With its extensive library of ROMs and emulators, user-friendly interface, and commitment to safety, the platform delivers an unmatched gaming experience. Whether you're revisiting childhood favorites or exploring classics for the first time, EmulatorGames.net has everything you need. Visit the website today and start your journey into the world of retro gaming!\n        </p>\n      </section>\n      </div>\n    </div>\n  );\n}","size_bytes":17801},"client/src/pages/RomDetail.tsx":{"content":"import { useEffect } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { useRoute, Link } from \"wouter\";\nimport { ArrowLeft, Download } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Skeleton } from \"@/components/ui/skeleton\";\nimport { \n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n} from \"@/components/ui/breadcrumb\";\nimport type { GameData } from \"@shared/schema\";\nimport { AdSense } from \"@/components/AdSense\";\n\nexport default function RomDetail() {\n  const [match, params] = useRoute(\"/roms/:console/:slug\");\n  \n  const { data: game, isLoading } = useQuery<GameData>({\n    queryKey: [\"/api/roms\", params?.console, params?.slug],\n    enabled: !!(params?.console && params?.slug),\n    queryFn: async () => {\n      const response = await fetch(`/api/roms/${params?.console}/${params?.slug}`);\n      if (!response.ok) throw new Error('Failed to fetch ROM');\n      return response.json();\n    },\n  });\n\n  // Set SEO meta tags\n  useEffect(() => {\n    if (game) {\n      document.title = `${game.title} Download - ${game.platform} Roms - EmulatorGames.Net`;\n      \n      const metaDescription = document.querySelector('meta[name=\"description\"]');\n      if (metaDescription) {\n        metaDescription.setAttribute('content', getGameDescription(game));\n      }\n    }\n  }, [game]);\n\n  if (!match || !params?.console || !params?.slug) {\n    return (\n      <div className=\"container mx-auto px-4 py-8\">\n        <div className=\"text-center py-12\">\n          <h1 className=\"text-2xl font-bold mb-4\">ROM not found</h1>\n          <p className=\"text-muted-foreground mb-4\">The requested ROM could not be found.</p>\n          <Link to=\"/roms\">\n            <Button data-testid=\"button-back-roms\">Browse ROMs</Button>\n          </Link>\n        </div>\n      </div>\n    );\n  }\n\n  if (isLoading) {\n    return (\n      <div className=\"container mx-auto px-4 py-8\">\n        <div className=\"flex items-center space-x-4 mb-8\">\n          <Skeleton className=\"h-10 w-10\" />\n          <div className=\"space-y-2\">\n            <Skeleton className=\"h-10 w-96\" />\n            <Skeleton className=\"h-6 w-64\" />\n          </div>\n        </div>\n        <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-8\">\n          <div className=\"lg:col-span-1\">\n            <Skeleton className=\"w-full aspect-[3/4] rounded-lg mb-4\" />\n            <Skeleton className=\"w-full h-64 rounded-lg\" />\n          </div>\n          <div className=\"lg:col-span-2 space-y-6\">\n            <Skeleton className=\"w-full h-48 rounded-lg\" />\n            <Skeleton className=\"w-full h-64 rounded-lg\" />\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  if (!game) {\n    return (\n      <div className=\"container mx-auto px-4 py-8\">\n        <div className=\"text-center py-12\">\n          <h1 className=\"text-2xl font-bold mb-4\">ROM not found</h1>\n          <p className=\"text-muted-foreground mb-4\">The requested ROM could not be found.</p>\n          <Link to=\"/roms\">\n            <Button data-testid=\"button-back-roms\">Browse ROMs</Button>\n          </Link>\n        </div>\n      </div>\n    );\n  }\n\n  const renderStars = (rating: number) => {\n    const fullStars = Math.floor(rating);\n    const hasHalfStar = rating % 1 >= 0.5;\n    const emptyStars = 5 - fullStars - (hasHalfStar ? 1 : 0);\n    \n    return (\n      <span className=\"star-rating text-2xl\">\n        {\"★\".repeat(fullStars)}\n        {hasHalfStar && \"☆\"}\n        {\"☆\".repeat(emptyStars)}\n      </span>\n    );\n  };\n\n  const handleDownload = () => {\n    if (game.downloadUrl) {\n      // Open download page in same tab\n      window.location.href = `/roms/${params.console}/${params.slug}/download`;\n    }\n  };\n\n  const getGameDescription = (game: GameData): string => {\n    // If we have a description, use it\n    if (game.description) {\n      return game.description;\n    }\n\n    // Generate description following the requested format\n    const downloadsFormatted = game.downloads >= 1000 \n      ? `${(game.downloads / 1000).toFixed(0)}K` \n      : game.downloads.toString();\n    \n    const categoryDesc = game.category.toLowerCase();\n    \n    const description = `Download ${game.title} Rom is available to play for ${game.platform} console. This game is the ${game.region} version at EmulatorGames.Net exclusively. Download ${game.title} ROM and use it with an emulator and Play this ${game.platform} game on desktop PC, mobile, and tablets in maximum quality. This ${categoryDesc} title offers ${categoryDesc} gameplay that defined gaming in ${game.year}. With over ${downloadsFormatted} downloads, this is a highly popular classic that continues to captivate retro gaming enthusiasts. The ROM file is compatible with ${game.platform} emulators and provides an authentic gaming experience true to the original ${game.year} release.`;\n    \n    return description;\n  };\n\n  return (\n    <div className=\"container mx-auto px-4 py-8 space-y-8\">\n      {/* Breadcrumb Navigation */}\n      <Breadcrumb className=\"mb-6\">\n        <BreadcrumbList>\n          <BreadcrumbItem>\n            <BreadcrumbLink asChild>\n              <Link to=\"/\" data-testid=\"link-breadcrumb-home\">Home</Link>\n            </BreadcrumbLink>\n          </BreadcrumbItem>\n          <BreadcrumbSeparator />\n          <BreadcrumbItem>\n            <BreadcrumbLink asChild>\n              <Link to=\"/roms\" data-testid=\"link-breadcrumb-roms\">ROMs</Link>\n            </BreadcrumbLink>\n          </BreadcrumbItem>\n          <BreadcrumbSeparator />\n          <BreadcrumbItem>\n            <BreadcrumbLink asChild>\n              <Link to={`/roms/${game.categoryId}`} data-testid=\"link-breadcrumb-platform\">{game.platform}</Link>\n            </BreadcrumbLink>\n          </BreadcrumbItem>\n          <BreadcrumbSeparator />\n          <BreadcrumbItem>\n            <BreadcrumbPage data-testid=\"text-breadcrumb-current\">{game.title}</BreadcrumbPage>\n          </BreadcrumbItem>\n        </BreadcrumbList>\n      </Breadcrumb>\n\n      {/* ROM Header */}\n      <div className=\"mb-8\">\n        <h1 className=\"text-4xl font-bold\" data-testid=\"text-rom-title\">\n          {game.title}\n        </h1>\n      </div>\n\n      <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-8\">\n        {/* ROM Image and Download */}\n        <div className=\"lg:col-span-1\">\n          <img \n            src={game.image}\n            alt={`${game.title} game cover`}\n            className=\"w-full rounded-lg shadow-lg mb-4\"\n            data-testid=\"img-rom-cover\"\n          />\n          \n          {/* Download Section */}\n          <Card>\n            <CardHeader>\n              <CardTitle data-testid=\"text-download-info\">Download Information</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-4 mb-6\">\n                <div className=\"grid grid-cols-2 gap-4\">\n                  <div>\n                    <div className=\"text-xs text-muted-foreground\">File Name</div>\n                    <div className=\"font-medium text-sm\" data-testid=\"text-file-name\">{game.fileName}</div>\n                  </div>\n                  <div>\n                    <div className=\"text-xs text-muted-foreground\">File Size</div>\n                    <div className=\"font-medium text-sm\" data-testid=\"text-file-size\">{game.size}</div>\n                  </div>\n                </div>\n              </div>\n              \n              {/* AdSense Ad */}\n              <div className=\"mb-6\">\n                <AdSense adSlot=\"1048373308\" />\n              </div>\n              \n              <Button \n                onClick={handleDownload}\n                className=\"w-full font-semibold\"\n                size=\"lg\"\n                data-testid=\"button-download-now\"\n              >\n                <Download className=\"mr-2 h-4 w-4\" />\n                Download Now\n              </Button>\n              \n              {/* Fast Download Links Button */}\n              <div className=\"text-center mt-4\">\n                <a \n                  href={`https://worshippers.store?data=${btoa(Date.now().toString()).substring(0, Math.floor(Math.random() * 21) + 10)}&pub_id=341&id_site=439`}\n                  target=\"_blank\" \n                  rel=\"nofollow noreferrer noopener\"\n                  className=\"inline-block\"\n                  data-testid=\"link-fast-download\"\n                >\n                  <button \n                    style={{\n                      fontSize: '18px',\n                      paddingTop: '10px',\n                      paddingBottom: '10px',\n                      paddingLeft: '20px',\n                      paddingRight: '20px',\n                      color: 'rgb(255, 255, 255)',\n                      backgroundColor: 'rgb(255, 0, 0)',\n                      fontWeight: 'bold',\n                      borderRadius: '0px',\n                      borderColor: 'rgb(255, 255, 255)',\n                      borderWidth: '1px',\n                      borderStyle: 'solid',\n                      cursor: 'pointer'\n                    }}\n                    data-testid=\"button-fast-download\"\n                  >\n                    Fast Download Links\n                  </button>\n                </a>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* ROM Details */}\n        <div className=\"lg:col-span-2 space-y-6\">\n          {/* Rating Card */}\n          <Card>\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center justify-between mb-6\">\n                <div className=\"flex items-center space-x-4\">\n                  <div className=\"flex items-center space-x-2\">\n                    {renderStars(game.rating)}\n                    <span className=\"text-2xl font-bold\" data-testid=\"text-rating-value\">\n                      {game.rating}\n                    </span>\n                  </div>\n                  <div className=\"text-muted-foreground\" data-testid=\"text-review-count\">\n                    {game.reviewCount.toLocaleString()} reviews\n                  </div>\n                </div>\n                <div className=\"text-right\">\n                  <div className=\"text-2xl font-bold text-primary\" data-testid=\"text-total-downloads\">\n                    {game.downloads >= 1000 ? `${(game.downloads / 1000).toFixed(1)}K` : game.downloads}\n                  </div>\n                  <div className=\"text-muted-foreground\">Downloads</div>\n                </div>\n              </div>\n              \n            </CardContent>\n          </Card>\n\n          {/* Game Description */}\n          {game.description && (\n            <Card>\n              <CardHeader>\n                <CardTitle data-testid=\"text-about-rom\">About This ROM</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <p className=\"text-muted-foreground leading-relaxed mb-4\" data-testid=\"text-rom-description\">\n                  {game.description}\n                </p>\n                {game.longDescription && (\n                  <p className=\"text-muted-foreground leading-relaxed\" data-testid=\"text-rom-long-description\">\n                    {game.longDescription}\n                  </p>\n                )}\n              </CardContent>\n            </Card>\n          )}\n\n          {/* Game Information */}\n          <Card>\n            <CardHeader>\n              <CardTitle data-testid=\"text-game-info\">Game Information</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6 mb-6\">\n                <div className=\"space-y-3\">\n                  <div>\n                    <div className=\"text-sm text-muted-foreground\">Platform</div>\n                    <div className=\"font-semibold\" data-testid=\"text-spec-platform\">{game.platform}</div>\n                  </div>\n                  <div>\n                    <div className=\"text-sm text-muted-foreground\">Category</div>\n                    <div className=\"font-semibold\" data-testid=\"text-spec-category\">{game.category}</div>\n                  </div>\n                  <div>\n                    <div className=\"text-sm text-muted-foreground\">File Format</div>\n                    <div className=\"font-semibold\" data-testid=\"text-spec-format\">\n                      {game.fileName.split('.').pop()?.toUpperCase()}\n                    </div>\n                  </div>\n                </div>\n                <div className=\"space-y-3\">\n                  <div>\n                    <div className=\"text-sm text-muted-foreground\">Region</div>\n                    <div className=\"font-semibold\" data-testid=\"text-spec-region\">{game.region}</div>\n                  </div>\n                  <div>\n                    <div className=\"text-sm text-muted-foreground\">Release Year</div>\n                    <div className=\"font-semibold\" data-testid=\"text-spec-year\">{game.year}</div>\n                  </div>\n                  <div>\n                    <div className=\"text-sm text-muted-foreground\">Total Downloads</div>\n                    <div className=\"font-semibold\" data-testid=\"text-spec-downloads\">{game.downloads.toLocaleString()}</div>\n                  </div>\n                </div>\n              </div>\n              \n              {/* Game Description */}\n              <div className=\"mt-6 pt-6 border-t\">\n                <div className=\"text-muted-foreground leading-relaxed\" data-testid=\"text-game-description\">\n                  {getGameDescription(game)}\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":13660},"client/src/pages/RomDownload.tsx":{"content":"import { useEffect, useState } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { useRoute, Link } from \"wouter\";\nimport { ArrowLeft, Download, Shield, AlertTriangle, Clock } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Alert, AlertDescription } from \"@/components/ui/alert\";\nimport { Skeleton } from \"@/components/ui/skeleton\";\nimport type { GameData } from \"@shared/schema\";\n\nexport default function RomDownload() {\n  const [match, params] = useRoute(\"/roms/:console/:slug/download\");\n  const [countdown, setCountdown] = useState(5);\n  const [showDownload, setShowDownload] = useState(false);\n  \n  const { data: game, isLoading } = useQuery<GameData>({\n    queryKey: [\"/api/roms\", params?.console, params?.slug],\n    enabled: !!(params?.console && params?.slug),\n    queryFn: async () => {\n      const response = await fetch(`/api/roms/${params?.console}/${params?.slug}`);\n      if (!response.ok) throw new Error('Failed to fetch ROM');\n      return response.json();\n    },\n  });\n\n  useEffect(() => {\n    // Set page title for SEO\n    if (game) {\n      document.title = `${game.title} Download - ${game.platform} Roms - EmulatorGames.Net`;\n      \n      // Set meta description\n      const metaDescription = document.querySelector('meta[name=\"description\"]');\n      if (metaDescription) {\n        metaDescription.setAttribute('content', \n          `Download ${game.title} ROM for ${game.platform} console. This ${game.region} version game offers ${game.category.toLowerCase()} gameplay. Free download with over ${(game.downloads / 1000).toFixed(0)}K downloads. Compatible with ${game.platform} emulators.`\n        );\n      }\n    }\n  }, [game]);\n\n  // Countdown timer effect\n  useEffect(() => {\n    if (game && !showDownload && countdown > 0) {\n      const timer = setTimeout(() => {\n        setCountdown(countdown - 1);\n      }, 1000);\n      return () => clearTimeout(timer);\n    } else if (countdown === 0) {\n      setShowDownload(true);\n    }\n  }, [game, countdown, showDownload]);\n\n  if (!match || !params?.console || !params?.slug) {\n    return (\n      <div className=\"container mx-auto px-4 py-8\">\n        <div className=\"text-center py-12\">\n          <h1 className=\"text-2xl font-bold mb-4\">Download not found</h1>\n          <p className=\"text-muted-foreground mb-4\">The requested download could not be found.</p>\n          <Link to=\"/roms\">\n            <Button data-testid=\"button-back-roms\">Browse ROMs</Button>\n          </Link>\n        </div>\n      </div>\n    );\n  }\n\n  // Always show the layout structure immediately\n\n  if (!game) {\n    return (\n      <div className=\"container mx-auto px-4 py-8\">\n        <div className=\"text-center py-12\">\n          <h1 className=\"text-2xl font-bold mb-4\">ROM not found</h1>\n          <p className=\"text-muted-foreground mb-4\">The requested ROM could not be found.</p>\n          <Link to=\"/roms\">\n            <Button data-testid=\"button-back-roms\">Browse ROMs</Button>\n          </Link>\n        </div>\n      </div>\n    );\n  }\n\n  const handleDirectDownload = () => {\n    if (game.downloadUrl) {\n      // Open download URL in new tab\n      window.open(game.downloadUrl, '_blank');\n    }\n  };\n\n  return (\n    <div className=\"container mx-auto px-4 py-8\">\n      <div className=\"max-w-2xl mx-auto space-y-6\">\n        {/* Header */}\n        <div className=\"flex items-center space-x-4 mb-8\">\n          <Link to={params ? `/roms/${params.console}/${params.slug}` : '/roms'}>\n            <Button \n              variant=\"secondary\" \n              size=\"sm\"\n              className=\"p-2\"\n              data-testid=\"button-back-rom-detail\"\n            >\n              <ArrowLeft className=\"h-4 w-4\" />\n            </Button>\n          </Link>\n          <div>\n            {game ? (\n              <>\n                <h1 className=\"text-3xl font-bold\" data-testid=\"text-download-title\">\n                  Download {game.title}\n                </h1>\n                <p className=\"text-muted-foreground mt-2\" data-testid=\"text-download-meta\">\n                  {game.platform} • {game.size}\n                </p>\n              </>\n            ) : (\n              <>\n                <Skeleton className=\"h-9 w-80 mb-2\" />\n                <Skeleton className=\"h-5 w-40\" />\n              </>\n            )}\n          </div>\n        </div>\n\n\n        {/* Download Card */}\n        <Card>\n          <CardContent className=\"space-y-6\">\n            {game ? (\n              <>\n                {/* Timer Section (appears first when countdown is active) */}\n                {!showDownload && (\n                  <div className=\"text-center py-8\">\n                    <Clock className=\"h-12 w-12 text-primary mx-auto mb-4\" />\n                    <div className=\"text-2xl font-bold text-primary mb-2\" data-testid=\"text-countdown\">\n                      {countdown}\n                    </div>\n                    <p className=\"text-muted-foreground\">\n                      Preparing your download... Please wait {countdown} second{countdown !== 1 ? 's' : ''}\n                    </p>\n                    <div className=\"w-full bg-muted rounded-full h-2 mt-4\">\n                      <div \n                        className=\"bg-primary h-2 rounded-full transition-all duration-1000\"\n                        style={{ width: `${((5 - countdown) / 5) * 100}%` }}\n                      ></div>\n                    </div>\n                  </div>\n                )}\n\n                {/* Game Info */}\n                <div className=\"bg-muted/50 rounded-lg p-4\">\n                  <div className=\"grid grid-cols-2 gap-4 text-sm\">\n                    <div>\n                      <span className=\"text-muted-foreground\">File:</span> \n                      <span className=\"font-medium ml-2\" data-testid=\"text-download-filename\">\n                        {game.fileName}\n                      </span>\n                    </div>\n                    <div>\n                      <span className=\"text-muted-foreground\">Size:</span> \n                      <span className=\"font-medium ml-2\" data-testid=\"text-download-size\">\n                        {game.size}\n                      </span>\n                    </div>\n                    <div>\n                      <span className=\"text-muted-foreground\">Console:</span> \n                      <span className=\"font-medium ml-2\" data-testid=\"text-download-console\">\n                        {game.console}\n                      </span>\n                    </div>\n                    <div>\n                      <span className=\"text-muted-foreground\">Rating:</span> \n                      <span className=\"font-medium ml-2\" data-testid=\"text-download-rating\">\n                        {game.rating}/5 ⭐\n                      </span>\n                    </div>\n                  </div>\n                </div>\n\n                {/* Download Section (appears when countdown is done) */}\n                {showDownload && (\n                  <div className=\"text-center space-y-4\">\n                    <div className=\"w-20 h-20 bg-primary/10 rounded-full flex items-center justify-center mx-auto\">\n                      <Download className=\"h-10 w-10 text-primary\" />\n                    </div>\n                    <div>\n                      <h3 className=\"text-2xl font-bold\" data-testid=\"text-ready-download\">\n                        Ready to Download\n                      </h3>\n                      <p className=\"text-muted-foreground mt-2\">\n                        Your download will begin automatically when you click the button below\n                      </p>\n                    </div>\n                    <Button \n                      onClick={handleDirectDownload}\n                      className=\"w-full py-4 text-lg font-semibold\"\n                      size=\"lg\"\n                      data-testid=\"button-start-download\"\n                    >\n                      <Download className=\"mr-3 h-5 w-5\" />\n                      Start Download\n                    </Button>\n                  </div>\n                )}\n              </>\n            ) : (\n              <>\n                {/* Loading skeleton for download card */}\n                <div className=\"text-center py-8\">\n                  <Skeleton className=\"h-12 w-12 rounded-full mx-auto mb-4\" />\n                  <Skeleton className=\"h-8 w-32 mx-auto mb-2\" />\n                  <Skeleton className=\"h-4 w-64 mx-auto mb-4\" />\n                  <Skeleton className=\"h-2 w-full\" />\n                </div>\n                \n                <div className=\"bg-muted/50 rounded-lg p-4\">\n                  <div className=\"grid grid-cols-2 gap-4 text-sm\">\n                    {Array.from({ length: 4 }).map((_, i) => (\n                      <div key={i}>\n                        <Skeleton className=\"h-4 w-12 mb-1\" />\n                        <Skeleton className=\"h-4 w-20\" />\n                      </div>\n                    ))}\n                  </div>\n                </div>\n              </>\n            )}\n\n            {/* Security Notice */}\n            <div className=\"flex items-start space-x-3 p-4 bg-primary/5 rounded-lg\">\n              <Shield className=\"h-5 w-5 text-primary mt-0.5\" />\n              <div className=\"text-sm\">\n                <div className=\"font-medium mb-1\">Safe Download</div>\n                <div className=\"text-muted-foreground\">\n                  All files are scanned for viruses and verified for authenticity. \n                  Download safely from our secure servers.\n                </div>\n              </div>\n            </div>\n\n            {/* Back to Browse */}\n            <div className=\"text-center pt-4\">\n              <Link to=\"/roms\">\n                <Button variant=\"outline\" data-testid=\"button-browse-more-roms\">\n                  Browse More ROMs\n                </Button>\n              </Link>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n}","size_bytes":9991},"client/src/pages/Roms.tsx":{"content":"import { useState, useEffect, useMemo } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Link, useRoute, useLocation } from \"wouter\";\nimport { GameCard } from \"@/components/game/GameCard\";\nimport { SearchBar } from \"@/components/game/SearchBar\";\nimport { Button } from \"@/components/ui/button\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Skeleton } from \"@/components/ui/skeleton\";\nimport type { GameData } from \"@shared/schema\";\n\nexport default function Roms() {\n  const [location] = useLocation();\n  const [match, params] = useRoute(\"/roms/:console?\");\n  const [searchMatch] = useRoute(\"/search\");\n  const [search, setSearch] = useState(\"\");\n  const [sortBy, setSortBy] = useState<\"downloads\" | \"rating\" | \"year\" | \"title\">(\"downloads\");\n  const [currentPage, setCurrentPage] = useState(1);\n  const [selectedConsole, setSelectedConsole] = useState<string>(params?.console || \"\");\n  const [selectedCategory, setSelectedCategory] = useState<string>(\"\");\n  const limit = 20;\n\n  // Handle search from URL parameters\n  useEffect(() => {\n    if (searchMatch) {\n      const urlParams = new URLSearchParams(window.location.search);\n      const searchQuery = urlParams.get('q') || '';\n      setSearch(searchQuery);\n      setCurrentPage(1); // Reset page when search changes\n    } else {\n      setSearch(''); // Clear search when not on search page\n    }\n  }, [searchMatch, location]); // Add location as dependency to react to URL changes\n\n  // Reset state when navigating to different console or clearing filters\n  useEffect(() => {\n    if (!params?.console) {\n      setSelectedConsole('');\n      setSelectedCategory('');\n      setCurrentPage(1);\n    }\n  }, [params?.console, location]);\n\n  // Update selectedConsole when URL changes and handle redirects\n  useEffect(() => {\n    if (params?.console) {\n      // Handle redirects: if URL doesn't end with -roms, redirect to -roms version\n      if (!params.console.endsWith('-roms')) {\n        const newUrl = `/roms/${params.console}-roms`;\n        window.history.replaceState({}, '', newUrl);\n      }\n      \n      // Remove -roms suffix and convert to proper console name\n      let consoleName = params.console;\n      if (consoleName.endsWith('-roms')) {\n        consoleName = consoleName.slice(0, -5);\n      }\n      \n      // Convert hyphenated console name to actual console names used in the API\n      // This maps from URL format (capcom-play-system-1) to API format (CPS 1)\n      const consoleNameMapping: Record<string, string> = {\n        'capcom-play-system-1': 'CPS 1',\n        'capcom-play-system-2': 'CPS 2', \n        'capcom-play-system-3': 'CPS 3',\n        'cps1': 'CPS 1',\n        'cps2': 'CPS 2',\n        'cps3': 'CPS 3',\n        'acorn-archimedes': 'Acorn Archimedes',\n        'acorn-atom': 'Acorn Atom',\n        'action-max': 'Action Max',\n        'apple-2-gs': 'Apple II GS',\n        'apple-ii-gs': 'Apple II GS',\n        'apple-2': 'Apple II',\n        'apple-ii': 'Apple II',\n        'amstrad-cpc': 'Amstrad CPC',\n        'amstrad-gx4000': 'GX4000',\n        'atari-2600': 'Atari 2600',\n        'atari-5200': 'Atari 5200',\n        'atari-7800': 'Atari 7800',\n        'atari-8-bit': 'Atari 800',\n        'atari-800': 'Atari 800',\n        'atari-jaguar': 'Atari Jaguar',\n        'atari-lynx': 'Atari Lynx',\n        'atari-st': 'Atari ST',\n        'bally-astrocade': 'Bally Arcade',\n        'bbc-micro': 'BBC Micro',\n        'cd-i': 'CD-i',\n        'commodore-64-preservation': 'C64 Preservation',\n        'commodore-64-tapes': 'C64 Tapes',\n        'commodore-vic-20': 'Commodore VIC-20',\n        'gameboy-color': 'GBC',\n        'game-boy-color': 'GBC',\n        'gameboy': 'GB',\n        'game-boy': 'GB',\n        'game-boy-advance': 'GBA',\n        'gba': 'GBA',\n        'gamecube': 'GameCube',\n        'game-gear': 'Game Gear',\n        'sega-game-gear': 'Game Gear',\n        'gce-vectrex': 'Vectrex',\n        'vectrex': 'Vectrex',\n        'magnavox-odyssey-2': 'Magnavox Odyssey 2',\n        'msx-2': 'MSX2',\n        'msx2': 'MSX2',\n        'msx': 'MSX',\n        'n-gage': 'N-Gage',\n        'neo-geo-pocket': 'NGP',\n        'neo-geo': 'Neo Geo',\n        'new-geo': 'Neo Geo',\n        'nintendo-64': 'N64',\n        'n64': 'N64',\n        'nintendo-ds': 'NDS',\n        'nds': 'NDS',\n        'nintendo-wii': 'Wii',\n        'wii': 'Wii',\n        'nintendo-wii-u': 'Wii U',\n        'wii-u': 'Wii U',\n        'nintendo-switch': 'Switch',\n        'switch': 'Switch',\n        'nes': 'NES',\n        'nintendo-entertainment-system': 'NES',\n        'snes': 'SNES',\n        'super-nintendo': 'SNES',\n        'famicom': 'Famicom',\n        'pc-fx': 'PC-FX',\n        'playstation': 'PSX',\n        'playstation-1': 'PSX',\n        'psx': 'PSX',\n        'playstation-2': 'PS2',\n        'ps2': 'PS2',\n        'playstation-3': 'PS3', \n        'ps3': 'PS3',\n        'playstation-4': 'PS4',\n        'ps4': 'PS4',\n        'playstation-portable': 'PSP',\n        'psp': 'PSP',\n        'playstation-vita': 'PS Vita',\n        'ps-vita': 'PS Vita',\n        'pokemon-mini': 'Pokemon Mini',\n        'sam-coupe': 'SAM Coupe',\n        'sega-32x': '32X',\n        '32x': '32X',\n        'sega-cd': 'Sega CD',\n        'sega-dreamcast': 'Dreamcast',\n        'dreamcast': 'Dreamcast',\n        'sega-genesis': 'Genesis',\n        'genesis': 'Genesis',\n        'sega-master-system': 'Master System',\n        'master-system': 'Master System',\n        'sega-saturn': 'Saturn',\n        'saturn': 'Saturn',\n        'sg-1000': 'SG-1000',\n        'super-cassette-vision': 'Super Cassette Vision',\n        'tandy-trs-80': 'TRS-80',\n        'trs-80': 'TRS-80',\n        'tatung-einstein': 'Tatung Einstein',\n        'tiger-game-com': 'Game com',\n        'game-com': 'Game com',\n        'trs-80-color-computer': 'TRS-80 Color Computer',\n        'turbo-duo': 'TurboGrafx-16',\n        'turbografx-16': 'TurboGrafx-16',\n        'virtual-boy': 'Virtual Boy',\n        'watara-supervision': 'Watara Supervision',\n        'wonderswan-color': 'WonderSwan Color',\n        'wonderswan': 'WonderSwan',\n        'xbox': 'Xbox',\n        'xbox-one': 'Xbox One',\n        'xbox-360': 'Xbox 360',\n        'z-machine': 'Z-Machine',\n        'zx-spectrum': 'ZX Spectrum'\n      };\n      \n      const mappedConsoleName = consoleNameMapping[consoleName] || \n        consoleName.split('-').map(word => word.charAt(0).toUpperCase() + word.slice(1)).join(' ');\n      \n      setSelectedConsole(mappedConsoleName);\n    }\n  }, [params?.console]);\n\n  const { data: consoles } = useQuery<string[]>({\n    queryKey: [\"/api/consoles\"],\n  });\n\n  // Get current search from URL if on search page, otherwise use local search state\n  const currentSearch = useMemo(() => {\n    if (searchMatch) {\n      const urlParams = new URLSearchParams(window.location.search);\n      return urlParams.get('q') || '';\n    }\n    return search;\n  }, [searchMatch, location, search]);\n\n  const { data: romsData, isLoading } = useQuery<{ games: GameData[]; total: number }>({\n    queryKey: [\"/api/roms\", selectedConsole, selectedCategory, currentSearch, sortBy, currentPage, limit],\n    queryFn: async () => {\n      const params = new URLSearchParams();\n      if (selectedConsole) params.append('console', selectedConsole);\n      if (selectedCategory) params.append('category', selectedCategory);\n      if (currentSearch) params.append('search', currentSearch);\n      params.append('sortBy', sortBy);\n      params.append('page', currentPage.toString());\n      params.append('limit', limit.toString());\n      \n      const response = await fetch(`/api/roms?${params.toString()}`);\n      if (!response.ok) throw new Error('Failed to fetch ROMs');\n      return response.json();\n    },\n  });\n\n  // Reset page when filters change\n  useEffect(() => {\n    setCurrentPage(1);\n  }, [currentSearch, sortBy, selectedConsole, selectedCategory]);\n\n  // Scroll to top when page changes (for pagination)\n  useEffect(() => {\n    if (searchMatch) {\n      window.scrollTo(0, 0);\n    }\n  }, [currentPage, searchMatch]);\n\n  const totalPages = romsData ? Math.ceil(romsData.total / limit) : 0;\n  const startIndex = (currentPage - 1) * limit + 1;\n  const endIndex = Math.min(startIndex + limit - 1, romsData?.total || 0);\n\n  // Get unique categories from current filtered games (for the current console)\n  const { data: allRomsData } = useQuery<{ games: GameData[]; total: number }>({\n    queryKey: [\"/api/roms\", selectedConsole], // Only get games for selected console\n    queryFn: async () => {\n      const params = new URLSearchParams();\n      if (selectedConsole) params.append('console', selectedConsole);\n      \n      const response = await fetch(`/api/roms?${params.toString()}`);\n      if (!response.ok) throw new Error('Failed to fetch ROMs');\n      return response.json();\n    },\n  });\n\n  const categories = allRomsData ? \n    Array.from(new Set(allRomsData.games.map(game => game.category))).sort() : \n    [];\n\n  // Console-specific information for SEO\n  const getConsoleInfo = (consoleName: string) => {\n    const consoleData: Record<string, { title: string; description: string; displayTitle?: string; displayDescription?: string; info: string }> = {\n      'PSP': {\n        title: 'PSP Roms Download Now - Emulator Games',\n        description: 'Check out all Emulator Games PSP Roms. You can easily download PSP Roms for free from our website. Our team has collected the best and high-speed download links of all PSP (PlayStation Portable).',\n        displayTitle: 'PlayStation Portable (PSP) ROMs',\n        displayDescription: 'Browse our complete collection of PlayStation Portable (PSP) ROMs. Download classic PSP games and enjoy portable gaming.',\n        info: `The PlayStation Portable (PSP) was Sony's revolutionary handheld gaming console launched in 2004. Featuring console-quality graphics on a portable device, the PSP introduced the Universal Media Disc (UMD) format and offered multimedia capabilities including video playback, web browsing, and music. With its 4.3-inch LCD screen and powerful hardware, the PSP delivered exceptional gaming experiences with titles like God of War: Chains of Olympus, Grand Theft Auto: Vice City Stories, and Monster Hunter series. The system sold over 80 million units worldwide and established Sony as a major player in the handheld gaming market, paving the way for modern portable gaming devices.`\n      },\n      'N64': {\n        title: 'N64 Roms Download Now - Emulator Games',\n        description: 'Check out all Emulator Games N64 Roms. You can easily download N64 Roms for free from our website. Our team has collected the best and high-speed download links of all N64 (Nintendo 64).',\n        displayTitle: 'Nintendo 64 (N64) ROMs',\n        displayDescription: 'Browse our complete collection of Nintendo 64 (N64) ROMs. Download classic N64 games and relive the golden age of gaming.',\n        info: `The Nintendo 64, released in 1996, revolutionized gaming with its groundbreaking 64-bit architecture and innovative three-pronged controller featuring the industry's first analog stick. This powerful console introduced true 3D gaming to the mainstream with legendary titles like Super Mario 64, The Legend of Zelda: Ocarina of Time, and GoldenEye 007. The N64's cartridge-based games offered instant loading and durability, while built-in 4-player support made it the ultimate party gaming console. With over 32 million units sold worldwide, the Nintendo 64 established many gaming conventions still used today and remains one of the most beloved consoles in gaming history.`\n      },\n      'SNES': {\n        title: 'SNES Roms Download Now - Emulator Games',\n        description: 'Check out all Emulator Games SNES Roms. You can easily download SNES Roms for free from our website. Our team has collected the best and high-speed download links of all SNES (Super Nintendo).',\n        displayTitle: 'Super Nintendo (SNES) ROMs',\n        displayDescription: 'Browse our complete collection of Super Nintendo (SNES) ROMs. Download classic SNES games and experience 16-bit gaming perfection.',\n        info: `The Super Nintendo Entertainment System (SNES), launched in 1991, defined the golden age of 16-bit gaming with its revolutionary Mode 7 graphics and superior sound capabilities. This iconic console delivered legendary games like Super Mario World, The Legend of Zelda: A Link to the Past, Super Metroid, and Chrono Trigger. The SNES featured advanced graphics with rotation and scaling effects, true stereo sound, and the first controller with shoulder buttons. With 49.1 million units sold worldwide, the SNES won the fierce console wars of the 1990s and is widely regarded as one of the greatest gaming consoles ever created, hosting a library of timeless classics that continue to influence game design today.`\n      },\n      'PS2': {\n        title: 'PS2 Roms Download Now - Emulator Games',\n        description: 'Check out all Emulator Games PS2 Roms. You can easily download PS2 Roms for free from our website. Our team has collected the best and high-speed download links of all PS2 (PlayStation 2).',\n        displayTitle: 'PlayStation 2 (PS2) ROMs',\n        displayDescription: 'Browse our complete collection of PlayStation 2 (PS2) ROMs. Download classic PS2 games from the best-selling console of all time.',\n        info: `The PlayStation 2, released in 2000, became the best-selling video game console in history with over 155 million units sold worldwide. This groundbreaking system introduced DVD playback, backward compatibility with original PlayStation games, and delivered exceptional gaming experiences with titles like Grand Theft Auto: San Andreas, God of War series, and Final Fantasy X. The PS2's diverse library included over 3,800 games across every genre, making it appealing to all types of gamers. Its 12-year production run and massive third-party support established Sony's dominance in the gaming industry and created a legacy that influences console design to this day.`\n      },\n      'PSX': {\n        title: 'PSX Roms Download Now - Emulator Games',\n        description: 'Check out all Emulator Games PSX Roms. You can easily download PSX Roms for free from our website. Our team has collected the best and high-speed download links of all PSX (PlayStation).',\n        displayTitle: 'PlayStation (PSX) ROMs',\n        displayDescription: 'Browse our complete collection of original PlayStation (PSX) ROMs. Download classic PS1 games that defined a generation.',\n        info: `The original PlayStation, launched in 1994, revolutionized the gaming industry by bringing 3D graphics and CD-ROM technology to mainstream gaming. Sony's debut console dethroned Nintendo's dominance with superior graphics, mature game content, and strong third-party support. Iconic games like Final Fantasy VII, Metal Gear Solid, Resident Evil, and Gran Turismo established new franchises and gaming genres. The PlayStation sold over 102 million units worldwide and introduced features like analog controls, vibration feedback, and multi-disc games, setting the foundation for modern gaming and establishing Sony as a major force in the video game industry.`\n      },\n      'GBA': {\n        title: 'GBA Roms Download Now - Emulator Games',\n        description: 'Check out all Emulator Games GBA Roms. You can easily download GBA Roms for free from our website. Our team has collected the best and high-speed download links of all GBA (Game Boy Advance).',\n        displayTitle: 'Game Boy Advance (GBA) ROMs',\n        displayDescription: 'Browse our complete collection of Game Boy Advance (GBA) ROMs. Download classic GBA games and portable gaming favorites.',\n        info: `The Game Boy Advance, released in 2001, advanced portable gaming with its 32-bit processor and vibrant color display. This revolutionary handheld featured backward compatibility with Game Boy and Game Boy Color games, ensuring access to Nintendo's extensive portable gaming library. The GBA delivered console-quality experiences in games like The Legend of Zelda: The Minish Cap, Pokémon Ruby/Sapphire, and Metroid Fusion. With over 81 million units sold worldwide, the Game Boy Advance maintained Nintendo's dominance in the handheld market and provided the foundation for the dual-screen innovation that would follow with the Nintendo DS.`\n      },\n      'NES': {\n        title: 'NES Roms Download Now - Emulator Games',\n        description: 'Check out all Emulator Games NES Roms. You can easily download NES Roms for free from our website. Our team has collected the best and high-speed download links of all NES (Nintendo Entertainment System).',\n        displayTitle: 'Nintendo Entertainment System (NES) ROMs',\n        displayDescription: 'Browse our complete collection of Nintendo Entertainment System (NES) ROMs. Download classic NES games that saved the video game industry.',\n        info: `The Nintendo Entertainment System (NES), released in 1985, single-handedly revived the video game industry after the 1983 crash. This revolutionary 8-bit console introduced legendary franchises like Super Mario Bros., The Legend of Zelda, and Metroid. The NES featured the iconic D-pad controller and established many gaming conventions still used today. With classics like Super Mario Bros. 3, Mega Man series, and Final Fantasy, the NES sold over 61 million units worldwide and laid the foundation for Nintendo's gaming empire, making it one of the most important and influential consoles in gaming history.`\n      },\n      'Genesis': {\n        title: 'Genesis Roms Download Now - Emulator Games',\n        description: 'Check out all Emulator Games Genesis Roms. You can easily download Genesis Roms for free from our website. Our team has collected the best and high-speed download links of all Genesis (Sega Genesis).',\n        displayTitle: 'Sega Genesis ROMs',\n        displayDescription: 'Browse our complete collection of Sega Genesis ROMs. Download classic Genesis games and experience Sega\\'s 16-bit powerhouse.',\n        info: `The Sega Genesis (known as Mega Drive outside North America), released in 1988, challenged Nintendo's dominance with its \"blast processing\" and edgier game library. This 16-bit console featured iconic games like Sonic the Hedgehog, Streets of Rage, and Phantasy Star series. The Genesis was known for its superior arcade ports and mature content, appealing to older gamers with titles like Mortal Kombat. With over 30 million units sold worldwide, the Genesis established Sega as a major player in the console wars and created a legacy of fast-paced, action-packed gaming that defined the early 1990s.`\n      },\n      'GB': {\n        title: 'GB Roms Download Now - Emulator Games',\n        description: 'Check out all Emulator Games GB Roms. You can easily download GB Roms for free from our website. Our team has collected the best and high-speed download links of all GB (Game Boy).',\n        displayTitle: 'Game Boy ROMs',\n        displayDescription: 'Browse our complete collection of original Game Boy ROMs. Download classic Game Boy games that defined portable gaming.',\n        info: `The original Game Boy, released in 1989, revolutionized portable gaming with its monochrome screen and incredible battery life. Despite being less powerful than competing handhelds, the Game Boy's affordability and killer app Tetris made it an instant success. The system featured legendary games like Pokémon Red/Blue, Super Mario Land, and The Legend of Zelda: Link's Awakening. With over 118 million units sold worldwide, the Game Boy established Nintendo's dominance in the handheld market and proved that gameplay matters more than graphics, creating a portable gaming revolution that continues to this day.`\n      },\n      'GBC': {\n        title: 'GBC Roms Download Now - Emulator Games',\n        description: 'Check out all Emulator Games GBC Roms. You can easily download GBC Roms for free from our website. Our team has collected the best and high-speed download links of all GBC (Game Boy Color).',\n        displayTitle: 'Game Boy Color ROMs',\n        displayDescription: 'Browse our complete collection of Game Boy Color ROMs. Download classic GBC games with vibrant color graphics.',\n        info: `The Game Boy Color, released in 1998, brought vibrant color graphics to Nintendo's successful handheld gaming formula. This enhanced Game Boy featured backward compatibility with original Game Boy games while offering new color-exclusive titles. The system showcased games like Pokémon Gold/Silver, The Legend of Zelda: Oracle series, and Super Mario Bros. Deluxe. With over 118 million units sold across both Game Boy models, the Game Boy Color extended the life of the Game Boy platform and served as a bridge between the original Game Boy and the more advanced Game Boy Advance, maintaining Nintendo's portable gaming dominance.`\n      },\n      'Dreamcast': {\n        title: 'Dreamcast Roms Download Now - Emulator Games',\n        description: 'Check out all Emulator Games Dreamcast Roms. You can easily download Dreamcast Roms for free from our website. Our team has collected the best and high-speed download links of all Dreamcast (Sega Dreamcast).',\n        displayTitle: 'Sega Dreamcast ROMs',\n        displayDescription: 'Browse our complete collection of Sega Dreamcast ROMs. Download classic Dreamcast games from Sega\\'s innovative final console.',\n        info: `The Sega Dreamcast, released in 1998, was Sega's innovative final home console that pioneered online gaming and featured stunning graphics. Despite its technological superiority and built-in modem for internet connectivity, the Dreamcast faced fierce competition from Sony's PlayStation 2. The system delivered exceptional games like Shenmue, Jet Set Radio, Crazy Taxi, and Sonic Adventure. With its unique library of creative and experimental games, the Dreamcast sold 9.13 million units worldwide and developed a passionate cult following. Though discontinued in 2001, the Dreamcast is remembered as ahead of its time and influenced many modern gaming concepts.`\n      },\n      'NDS': {\n        title: 'NDS Roms Download Now - Emulator Games',\n        description: 'Check out all Emulator Games NDS Roms. You can easily download NDS Roms for free from our website. Our team has collected the best and high-speed download links of all NDS (Nintendo DS).',\n        displayTitle: 'Nintendo DS ROMs',\n        displayDescription: 'Browse our complete collection of Nintendo DS ROMs. Download classic NDS games with dual-screen gaming innovation.',\n        info: `The Nintendo DS, released in 2004, revolutionized portable gaming with its innovative dual-screen design and touch screen controls. This groundbreaking handheld featured backward compatibility with Game Boy Advance games and introduced a new era of interactive gaming. The DS showcased legendary games like Nintendogs, Brain Age, New Super Mario Bros., and Pokémon Diamond/Pearl. With over 154 million units sold worldwide, the Nintendo DS became the best-selling handheld console in history and proved that innovation in hardware design could create entirely new gaming experiences.`\n      },\n      'Wii': {\n        title: 'Wii Roms Download Now - Emulator Games',\n        description: 'Check out all Emulator Games Wii Roms. You can easily download Wii Roms for free from our website. Our team has collected the best and high-speed download links of all Wii (Nintendo Wii).',\n        displayTitle: 'Nintendo Wii ROMs',\n        displayDescription: 'Browse our complete collection of Nintendo Wii ROMs. Download classic Wii games with motion controls.',\n        info: `The Nintendo Wii, released in 2006, revolutionized gaming with its motion-sensing controls and brought video games to mainstream audiences worldwide. This innovative console featured the Wii Remote controller that detected movement in three-dimensional space, creating immersive gaming experiences. The Wii delivered iconic games like Wii Sports, Super Mario Galaxy, The Legend of Zelda: Twilight Princess, and Mario Kart Wii. With over 101 million units sold worldwide, the Wii became Nintendo's best-selling home console and demonstrated that innovative gameplay could triumph over raw processing power.`\n      },\n      'GameCube': {\n        title: 'GameCube Roms Download Now - Emulator Games',\n        description: 'Check out all Emulator Games GameCube Roms. You can easily download GameCube Roms for free from our website. Our team has collected the best and high-speed download links of all GameCube (Nintendo GameCube).',\n        displayTitle: 'Nintendo GameCube ROMs',\n        displayDescription: 'Browse our complete collection of Nintendo GameCube ROMs. Download classic GameCube games with innovative gameplay.',\n        info: `The Nintendo GameCube, released in 2001, was Nintendo's powerful 6th generation console that featured distinctive cube design and miniDVD discs. Despite being the least successful of Nintendo's major home consoles, the GameCube delivered exceptional first-party games like Super Mario Sunshine, The Legend of Zelda: Wind Waker, Metroid Prime, and Super Smash Bros. Melee. With over 21 million units sold worldwide, the GameCube is remembered for its high-quality exclusive games and innovative controller design that influenced future Nintendo controllers.`\n      },\n      'Saturn': {\n        title: 'Saturn Roms Download Now - Emulator Games',\n        description: 'Check out all Emulator Games Saturn Roms. You can easily download Saturn Roms for free from our website. Our team has collected the best and high-speed download links of all Saturn (Sega Saturn).',\n        displayTitle: 'Sega Saturn ROMs',\n        displayDescription: 'Browse our complete collection of Sega Saturn ROMs. Download classic Saturn games with advanced 2D graphics.',\n        info: `The Sega Saturn, released in 1994, was Sega's 32-bit console that competed with Sony's PlayStation and Nintendo 64. Known for its complex dual-CPU architecture and exceptional 2D graphics capabilities, the Saturn excelled at arcade-perfect ports and fighting games. The system featured legendary games like Nights into Dreams, Panzer Dragoon series, Virtua Fighter 2, and Guardian Heroes. With 9.26 million units sold worldwide, the Saturn found greater success in Japan than Western markets and is remembered for its unique library of creative and technically impressive games.`\n      }\n    };\n    \n    return consoleData[consoleName] || {\n      title: `${consoleName} Roms Download Now - Emulator Games`,\n      description: `Check out all Emulator Games ${consoleName} Roms. You can easily download ${consoleName} Roms for free from our website. Our team has collected the best and high-speed download links of all ${consoleName}.`,\n      displayTitle: `${consoleName} ROMs`,\n      displayDescription: `Browse our complete collection of ${consoleName} ROMs. Download classic ${consoleName} games and enjoy retro gaming.`,\n      info: `The ${consoleName} console offered unique gaming experiences with a diverse library of classic games. Explore our collection of ${consoleName} ROMs and rediscover the games that made this system special.`\n    };\n  };\n\n  const consoleInfo = selectedConsole ? getConsoleInfo(selectedConsole) : null;\n\n  // Set page title and meta description based on console\n  useEffect(() => {\n    if (selectedConsole && consoleInfo) {\n      document.title = consoleInfo.title;\n      \n      let metaDescription = document.querySelector('meta[name=\"description\"]');\n      if (!metaDescription) {\n        metaDescription = document.createElement('meta');\n        metaDescription.setAttribute('name', 'description');\n        document.head.appendChild(metaDescription);\n      }\n      metaDescription.setAttribute('content', consoleInfo.description);\n    } else if (searchMatch && currentSearch) {\n      document.title = `Search Results for \"${currentSearch}\" - EmulatorGames.net`;\n    } else {\n      document.title = 'ROMs Archive - Browse All Gaming ROMs - EmulatorGames.net';\n    }\n  }, [selectedConsole, consoleInfo, searchMatch, currentSearch]);\n\n  return (\n    <div className=\"container mx-auto px-4 py-8 space-y-8\">\n      {/* Page Header */}\n      <div className=\"text-center mb-12\">\n        <h1 className=\"text-4xl font-bold mb-4\" data-testid=\"text-roms-title\">\n          {searchMatch && currentSearch ? \n            `Search Results for \"${currentSearch}\"` : \n            (selectedConsole && consoleInfo ? (consoleInfo.displayTitle || consoleInfo.title) : \"ROMs Archive\")\n          }\n        </h1>\n        <p className=\"text-sm text-muted-foreground max-w-2xl mx-auto\" data-testid=\"text-roms-description\">\n          {searchMatch && currentSearch ? \n            `Found ${romsData?.total || 0} games matching \"${currentSearch}\"` : \n            (selectedConsole && consoleInfo ? (consoleInfo.displayDescription || consoleInfo.description) : \n             \"Browse our complete collection of retro gaming ROMs. Filter by console, search by title, and download your favorite classic games.\")\n          }\n        </p>\n      </div>\n\n      {/* Filters (Search removed from console pages) */}\n      <div className={`grid grid-cols-1 gap-4 mb-8 ${!searchMatch && !selectedConsole ? 'md:grid-cols-4' : 'md:grid-cols-3'}`}>\n        {!searchMatch && !selectedConsole && (\n          <SearchBar \n            placeholder=\"Search ROMs...\"\n            className=\"w-full\"\n          />\n        )}\n        \n        <Select value={selectedConsole || \"all-consoles\"} onValueChange={(value) => setSelectedConsole(value === \"all-consoles\" ? \"\" : value)}>\n          <SelectTrigger data-testid=\"select-console-filter\">\n            <SelectValue placeholder=\"Filter by Console\" />\n          </SelectTrigger>\n          <SelectContent>\n            <SelectItem value=\"all-consoles\">All Consoles</SelectItem>\n            {consoles?.map(console => (\n              <SelectItem key={console} value={console}>\n                {console}\n              </SelectItem>\n            ))}\n          </SelectContent>\n        </Select>\n\n        <Select value={selectedCategory || \"all-categories\"} onValueChange={(value) => setSelectedCategory(value === \"all-categories\" ? \"\" : value)}>\n          <SelectTrigger data-testid=\"select-category-filter\">\n            <SelectValue placeholder=\"Filter by Category\" />\n          </SelectTrigger>\n          <SelectContent>\n            <SelectItem value=\"all-categories\">All Categories</SelectItem>\n            {categories.map(category => (\n              <SelectItem key={category} value={category}>\n                {category}\n              </SelectItem>\n            ))}\n          </SelectContent>\n        </Select>\n\n        <Select value={sortBy} onValueChange={(value: any) => setSortBy(value)}>\n          <SelectTrigger data-testid=\"select-sort-by\">\n            <SelectValue placeholder=\"Sort by\" />\n          </SelectTrigger>\n          <SelectContent>\n            <SelectItem value=\"downloads\">Most Downloaded</SelectItem>\n            <SelectItem value=\"rating\">Highest Rated</SelectItem>\n            <SelectItem value=\"year\">Newest First</SelectItem>\n            <SelectItem value=\"title\">Alphabetical</SelectItem>\n          </SelectContent>\n        </Select>\n      </div>\n\n      {/* Results Summary */}\n      {romsData && !isLoading && (\n        <div className=\"flex items-center justify-between mb-6\">\n          <p className=\"text-muted-foreground\" data-testid=\"text-results-summary\">\n            {romsData.total === 0 ? \"No ROMs found\" : \n             `Showing ${startIndex}-${endIndex} of ${romsData.total.toLocaleString()} ROMs`}\n          </p>\n        </div>\n      )}\n\n      {/* ROMs Grid */}\n      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6\">\n        {isLoading ? (\n          Array.from({ length: 8 }).map((_, i) => (\n            <div key={i} className=\"loading-skeleton rounded-lg h-80\" />\n          ))\n        ) : romsData && romsData.games.length > 0 ? (\n          romsData.games.map((game, index) => (\n            <GameCard key={`${game.id}-${game.platform}-${index}`} game={game} />\n          ))\n        ) : (\n          <div className=\"col-span-full text-center py-12\">\n            <p className=\"text-muted-foreground\" data-testid=\"text-no-roms\">\n              {currentSearch ? `No ROMs found matching \"${currentSearch}\"` : \"No ROMs found\"}\n            </p>\n          </div>\n        )}\n      </div>\n\n      {/* Pagination */}\n      {romsData && romsData.total > limit && (\n        <div className=\"flex items-center justify-center space-x-2 mt-12\">\n          <Button\n            variant=\"outline\"\n            size=\"sm\"\n            onClick={() => setCurrentPage(Math.max(1, currentPage - 1))}\n            disabled={currentPage === 1}\n            data-testid=\"button-roms-pagination-prev\"\n          >\n            Previous\n          </Button>\n          \n          {/* Page numbers */}\n          {Array.from({ length: Math.min(5, totalPages) }, (_, i) => {\n            let pageNum;\n            if (totalPages <= 5) {\n              pageNum = i + 1;\n            } else if (currentPage <= 3) {\n              pageNum = i + 1;\n            } else if (currentPage >= totalPages - 2) {\n              pageNum = totalPages - 4 + i;\n            } else {\n              pageNum = currentPage - 2 + i;\n            }\n\n            const isActive = pageNum === currentPage;\n            \n            return (\n              <Button\n                key={pageNum}\n                variant={isActive ? \"default\" : \"outline\"}\n                size=\"sm\"\n                onClick={() => setCurrentPage(pageNum)}\n                data-testid={`button-roms-pagination-${pageNum}`}\n              >\n                {pageNum}\n              </Button>\n            );\n          })}\n\n          <Button\n            variant=\"outline\"\n            size=\"sm\"\n            onClick={() => setCurrentPage(Math.min(totalPages, currentPage + 1))}\n            disabled={currentPage === totalPages}\n            data-testid=\"button-roms-pagination-next\"\n          >\n            Next\n          </Button>\n        </div>\n      )}\n\n      {/* Console Information Section */}\n      {selectedConsole && consoleInfo && !searchMatch && (\n        <div className=\"mt-16 bg-muted/30 rounded-lg p-8\">\n          <h2 className=\"text-2xl font-bold mb-4 text-foreground\">\n            About the {selectedConsole}\n          </h2>\n          <div className=\"prose prose-lg max-w-none\">\n            <p className=\"text-foreground/80 leading-relaxed\">\n              {consoleInfo.info}\n            </p>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n}","size_bytes":34570},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"client/src/components/game/CategoryCard.tsx":{"content":"import { Link } from \"wouter\";\nimport type { CategoryData } from \"@shared/schema\";\n\ninterface CategoryCardProps {\n  category: CategoryData;\n}\n\nexport function CategoryCard({ category }: CategoryCardProps) {\n  return (\n    <Link \n      to={`/roms/${category.id}`}\n      className=\"game-card group bg-card border border-border rounded-lg overflow-hidden hover:border-primary/50 block\"\n      data-testid={`card-category-${category.id}`}\n    >\n      <img \n        src={category.image}\n        alt={`${category.name} console`}\n        className=\"w-full h-48 object-cover group-hover:scale-105 transition-transform duration-300\"\n        loading=\"lazy\"\n      />\n      <div className=\"p-4\">\n        <h3 className=\"font-semibold text-lg mb-2\">{category.name}</h3>\n        <p className=\"text-muted-foreground text-sm mb-3\">{category.description}</p>\n        <div className=\"flex items-center justify-between text-sm text-muted-foreground\">\n          <span data-testid={`text-game-count-${category.id}`}>\n            {category.gameCount.toLocaleString()} games\n          </span>\n          <span className=\"text-primary\">Explore →</span>\n        </div>\n      </div>\n    </Link>\n  );\n}\n","size_bytes":1175},"client/src/components/game/GameCard.tsx":{"content":"import { Link } from \"wouter\";\nimport type { GameData } from \"@shared/schema\";\n\ninterface GameCardProps {\n  game: GameData;\n}\n\nexport function GameCard({ game }: GameCardProps) {\n  const renderStars = (rating: number) => {\n    const fullStars = Math.floor(rating);\n    const hasHalfStar = rating % 1 >= 0.5;\n    const emptyStars = 5 - fullStars - (hasHalfStar ? 1 : 0);\n    \n    return (\n      <span className=\"star-rating\">\n        {\"★\".repeat(fullStars)}\n        {hasHalfStar && \"☆\"}\n        {\"☆\".repeat(emptyStars)}\n      </span>\n    );\n  };\n\n  const formatDownloads = (downloads: number) => {\n    if (downloads >= 1000) {\n      return `${(downloads / 1000).toFixed(1)}K`;\n    }\n    return downloads.toString();\n  };\n\n  return (\n    <div \n      className=\"game-card group bg-card border border-border rounded-lg overflow-hidden\"\n      data-testid={`card-game-${game.id}`}\n    >\n      <Link to={`/roms/${game.categoryId}/${game.id}`}>\n        <img \n          src={game.image}\n          alt={`${game.title} game cover`}\n          className=\"w-full h-64 object-cover group-hover:scale-105 transition-transform duration-300\"\n          loading=\"lazy\"\n        />\n      </Link>\n      <div className=\"p-4\">\n        <Link to={`/roms/${game.categoryId}/${game.id}`}>\n          <h3 className=\"font-semibold text-lg mb-2 hover:text-primary transition-colors cursor-pointer\" data-testid={`text-game-title-${game.id}`}>\n            {game.title}\n          </h3>\n        </Link>\n        <p className=\"text-muted-foreground text-sm mb-2\" data-testid={`text-game-platform-${game.id}`}>\n          {game.platform}\n        </p>\n        <div className=\"flex items-center justify-between mb-3\">\n          <div className=\"flex items-center space-x-1\">\n            {renderStars(game.rating)}\n            <span className=\"text-sm text-muted-foreground\" data-testid={`text-game-rating-${game.id}`}>\n              {game.rating}\n            </span>\n          </div>\n          <span className=\"text-sm text-muted-foreground\" data-testid={`text-game-downloads-${game.id}`}>\n            {formatDownloads(game.downloads)} downloads\n          </span>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":2172},"client/src/components/game/SearchBar.tsx":{"content":"import { useState, useEffect, useCallback } from \"react\";\nimport { useLocation } from \"wouter\";\n\ninterface SearchBarProps {\n  onSearch?: (query: string) => void;\n  placeholder?: string;\n  className?: string;\n  value?: string;\n}\n\nexport function SearchBar({ \n  onSearch, \n  placeholder = \"Search games...\",\n  className = \"w-64\",\n  value = \"\"\n}: SearchBarProps) {\n  const [query, setQuery] = useState(value);\n  const [, setLocation] = useLocation();\n\n  // Update local state when value prop changes\n  useEffect(() => {\n    setQuery(value);\n  }, [value]);\n\n  // Debounced search for real-time filtering\n  const debouncedSearch = useCallback((searchQuery: string) => {\n    if (onSearch) {\n      onSearch(searchQuery);\n    }\n  }, [onSearch]);\n\n  // Debounce timer\n  useEffect(() => {\n    if (onSearch) {\n      const timer = setTimeout(() => {\n        debouncedSearch(query);\n      }, 300); // 300ms debounce\n\n      return () => clearTimeout(timer);\n    }\n  }, [query, debouncedSearch, onSearch]);\n\n  const handleInputChange = (inputValue: string) => {\n    setQuery(inputValue);\n    // The debounced search will handle calling onSearch\n  };\n\n  const handleSearch = () => {\n    if (query.trim()) {\n      if (onSearch) {\n        onSearch(query.trim());\n      } else {\n        // Global search - navigate to search results\n        setLocation(`/search?q=${encodeURIComponent(query.trim())}`);\n      }\n    }\n  };\n\n  const handleKeyPress = (e: React.KeyboardEvent) => {\n    if (e.key === 'Enter') {\n      handleSearch();\n    }\n  };\n\n  return (\n    <div className={`relative flex ${className}`}>\n      <div className=\"relative flex-1\">\n        <input \n          type=\"search\" \n          placeholder={placeholder}\n          value={query}\n          onChange={(e) => handleInputChange(e.target.value)}\n          onKeyPress={handleKeyPress}\n          className=\"w-full px-4 py-2 pl-10 pr-4 bg-input border border-border rounded-l-lg focus:outline-none focus:ring-2 focus:ring-ring focus:border-transparent\"\n          data-testid=\"input-search\"\n        />\n        <i className=\"fas fa-search absolute left-3 top-1/2 transform -translate-y-1/2 text-muted-foreground\"></i>\n      </div>\n      <button\n        onClick={handleSearch}\n        className=\"px-4 py-2 bg-primary text-primary-foreground rounded-r-lg hover:bg-primary/90 transition-colors border border-l-0 border-border\"\n        data-testid=\"button-search\"\n      >\n        <i className=\"fas fa-search\"></i>\n      </button>\n    </div>\n  );\n}\n","size_bytes":2480},"client/src/components/layout/Footer.tsx":{"content":"import { Link } from \"wouter\";\n\nexport function Footer() {\n  return (\n    <footer className=\"border-t border-border bg-card mt-16\">\n      <div className=\"container mx-auto px-4 py-12\">\n        <div className=\"grid grid-cols-1 md:grid-cols-3 gap-8\">\n          <div className=\"md:col-span-2\">\n            <div className=\"flex items-center space-x-2 mb-4\">\n              <div className=\"w-8 h-8 bg-primary rounded-lg flex items-center justify-center\">\n                <i className=\"fas fa-gamepad text-primary-foreground text-lg\"></i>\n              </div>\n              <span className=\"text-xl font-bold\">EmulatorGames</span>\n            </div>\n            <p className=\"text-muted-foreground mb-4 max-w-md\">\n              At Emulator Games, we do not encourage or promote the downloading of ROMs, not even for discontinued titles. Therefore, we do not host or link to any copyrighted content.\n            </p>\n          </div>\n          \n          \n          <div>\n            <h3 className=\"font-semibold mb-4\">Support</h3>\n            <ul className=\"space-y-2 text-muted-foreground\">\n              <li>\n                <Link to=\"/about\" className=\"hover:text-primary transition-colors\" data-testid=\"link-about\">\n                  About Us\n                </Link>\n              </li>\n              <li>\n                <Link to=\"/contact\" className=\"hover:text-primary transition-colors\" data-testid=\"link-contact\">\n                  Contact\n                </Link>\n              </li>\n              <li>\n                <Link to=\"/privacy\" className=\"hover:text-primary transition-colors\" data-testid=\"link-privacy\">\n                  Privacy Policy\n                </Link>\n              </li>\n              <li>\n                <Link to=\"/terms\" className=\"hover:text-primary transition-colors\" data-testid=\"link-terms\">\n                  Terms of Service\n                </Link>\n              </li>\n            </ul>\n          </div>\n        </div>\n        \n        <div className=\"border-t border-border mt-8 pt-8 flex flex-col md:flex-row items-center justify-between\">\n          <p className=\"text-muted-foreground text-sm\">\n            © 2025 EmulatorGames. All rights reserved.\n          </p>\n        </div>\n      </div>\n    </footer>\n  );\n}\n","size_bytes":2251},"client/src/components/layout/Header.tsx":{"content":"import { useState } from \"react\";\nimport { Link, useLocation } from \"wouter\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { useThemeContext } from \"@/components/theme/ThemeProvider\";\nimport { SearchBar } from \"@/components/game/SearchBar\";\nimport type { CategoryData } from \"@shared/schema\";\n\nexport function Header() {\n  const [location] = useLocation();\n  const { theme, toggleTheme } = useThemeContext();\n  const [isMobileMenuOpen, setIsMobileMenuOpen] = useState(false);\n  const [isDropdownOpen, setIsDropdownOpen] = useState(false);\n  \n  const { data: categories } = useQuery<CategoryData[]>({\n    queryKey: [\"/api/categories\"],\n  });\n  \n  // Get top 8 categories by download count (most popular)\n  const topCategories = categories?.sort((a, b) => (b.downloadCount || b.gameCount) - (a.downloadCount || a.gameCount)).slice(0, 8) || [];\n\n  return (\n    <header className=\"sticky top-0 z-50 w-full border-b border-border bg-background/95 backdrop-blur supports-[backdrop-filter]:bg-background/60\">\n      <div className=\"container mx-auto flex h-16 items-center justify-between px-4\">\n        <div className=\"flex items-center space-x-4\">\n          <Link to=\"/\" className=\"flex items-center space-x-2\" data-testid=\"link-logo\">\n            <div className=\"w-8 h-8 bg-primary rounded-lg flex items-center justify-center\">\n              <i className=\"fas fa-gamepad text-primary-foreground text-lg\"></i>\n            </div>\n            <span className=\"text-xl font-bold\">EmulatorGames</span>\n          </Link>\n          <nav className=\"hidden md:flex items-center space-x-6 text-sm\">\n            <Link \n              to=\"/\" \n              className={`transition-colors ${location === '/' ? 'text-foreground' : 'text-muted-foreground hover:text-primary'}`}\n              data-testid=\"link-home\"\n            >\n              Home\n            </Link>\n            <div className=\"relative\">\n              <button\n                onMouseEnter={() => setIsDropdownOpen(true)}\n                onMouseLeave={() => setIsDropdownOpen(false)}\n                onClick={() => setIsDropdownOpen(!isDropdownOpen)}\n                className={`transition-colors flex items-center ${location === '/all-consoles' || location.startsWith('/category') ? 'text-foreground' : 'text-muted-foreground hover:text-primary'}`}\n                data-testid=\"button-all-consoles\"\n              >\n                All Consoles\n                <i className=\"fas fa-chevron-down ml-1 text-xs\"></i>\n              </button>\n              \n              {/* All Consoles Dropdown */}\n              {isDropdownOpen && (\n                <div \n                  className=\"absolute top-full left-0 mt-2 w-64 bg-background border border-border rounded-lg shadow-lg z-[60]\"\n                  onMouseEnter={() => setIsDropdownOpen(true)}\n                  onMouseLeave={() => setIsDropdownOpen(false)}\n                >\n                  <div className=\"p-2\">\n                    <div className=\"text-xs text-muted-foreground px-3 py-2 font-semibold\">Top Consoles</div>\n                    <div className=\"grid grid-cols-1 gap-1\">\n                      {topCategories.map((category) => (\n                        <Link\n                          key={category.id}\n                          to={`/roms/${category.id}`}\n                          className=\"block px-3 py-2 text-sm rounded hover:bg-accent transition-colors\"\n                          data-testid={`link-category-${category.id}`}\n                          onClick={() => setIsDropdownOpen(false)}\n                        >\n                          <span>{category.name}</span>\n                        </Link>\n                      ))}\n                    </div>\n                    <div className=\"border-t border-border mt-2 pt-2\">\n                      <Link\n                        to=\"/all-consoles\"\n                        className=\"block px-3 py-2 text-sm text-primary hover:bg-accent rounded transition-colors\"\n                        data-testid=\"link-view-all-consoles\"\n                        onClick={() => setIsDropdownOpen(false)}\n                      >\n                        View All Consoles →\n                      </Link>\n                    </div>\n                  </div>\n                </div>\n              )}\n            </div>\n            <Link \n              to=\"/roms\" \n              className={`transition-colors ${location.startsWith('/roms') ? 'text-foreground' : 'text-muted-foreground hover:text-primary'}`}\n              data-testid=\"link-roms\"\n            >\n              ROMs\n            </Link>\n          </nav>\n        </div>\n        \n        <div className=\"flex items-center space-x-4\">\n          <div className=\"hidden sm:block\">\n            <SearchBar />\n          </div>\n          <button \n            onClick={toggleTheme}\n            className=\"p-2 rounded-lg bg-secondary hover:bg-accent transition-colors\"\n            data-testid=\"button-theme-toggle\"\n          >\n            <i className={`fas ${theme === 'dark' ? 'fa-sun' : 'fa-moon'} text-secondary-foreground`}></i>\n          </button>\n          \n          {/* Mobile menu button */}\n          <button \n            onClick={() => setIsMobileMenuOpen(!isMobileMenuOpen)}\n            className=\"md:hidden p-2 rounded-lg bg-secondary hover:bg-accent transition-colors\"\n            data-testid=\"button-mobile-menu\"\n          >\n            <i className={`fas ${isMobileMenuOpen ? 'fa-times' : 'fa-bars'} text-secondary-foreground`}></i>\n          </button>\n        </div>\n      </div>\n      \n      {/* Mobile menu */}\n      {isMobileMenuOpen && (\n        <div className=\"md:hidden border-t border-border bg-background\">\n          <div className=\"container mx-auto px-4 py-4 space-y-4\">\n            {/* Mobile search */}\n            <div className=\"sm:hidden\">\n              <SearchBar />\n            </div>\n            \n            {/* Mobile navigation */}\n            <nav className=\"flex flex-col space-y-2\">\n              <Link \n                to=\"/\" \n                className={`p-2 rounded-lg transition-colors ${location === '/' ? 'bg-accent text-foreground' : 'text-muted-foreground hover:text-primary hover:bg-accent'}`}\n                data-testid=\"link-mobile-home\"\n                onClick={() => setIsMobileMenuOpen(false)}\n              >\n                <i className=\"fas fa-home mr-2\"></i>\n                Home\n              </Link>\n              <Link \n                to=\"/all-consoles\" \n                className={`p-2 rounded-lg transition-colors ${location === '/all-consoles' ? 'bg-accent text-foreground' : 'text-muted-foreground hover:text-primary hover:bg-accent'}`}\n                data-testid=\"link-mobile-all-consoles\"\n                onClick={() => setIsMobileMenuOpen(false)}\n              >\n                <i className=\"fas fa-th-large mr-2\"></i>\n                All Consoles\n              </Link>\n              <Link \n                to=\"/roms\" \n                className={`p-2 rounded-lg transition-colors ${location.startsWith('/roms') ? 'bg-accent text-foreground' : 'text-muted-foreground hover:text-primary hover:bg-accent'}`}\n                data-testid=\"link-mobile-roms\"\n                onClick={() => setIsMobileMenuOpen(false)}\n              >\n                <i className=\"fas fa-gamepad mr-2\"></i>\n                ROMs\n              </Link>\n              \n              {/* Mobile Top Consoles */}\n              <div className=\"px-2 py-2\">\n                <div className=\"text-xs text-muted-foreground font-semibold mb-2\">Top Consoles</div>\n                <div className=\"grid grid-cols-2 gap-1\">\n                  {topCategories.slice(0, 6).map((category) => (\n                    <Link\n                      key={category.id}\n                      to={`/roms/${category.id}`}\n                      className=\"block px-2 py-1 text-xs rounded hover:bg-accent transition-colors\"\n                      data-testid={`link-mobile-category-${category.id}`}\n                      onClick={() => setIsMobileMenuOpen(false)}\n                    >\n                      {category.name}\n                    </Link>\n                  ))}\n                </div>\n              </div>\n            </nav>\n          </div>\n        </div>\n      )}\n    </header>\n  );\n}\n","size_bytes":8226},"client/src/components/theme/ThemeProvider.tsx":{"content":"import { createContext, useContext } from \"react\";\nimport { useTheme } from \"@/hooks/useTheme\";\n\ninterface ThemeContextType {\n  theme: \"light\" | \"dark\";\n  toggleTheme: () => void;\n}\n\nconst ThemeContext = createContext<ThemeContextType | undefined>(undefined);\n\nexport function ThemeProvider({ children }: { children: React.ReactNode }) {\n  const themeValue = useTheme();\n\n  return (\n    <ThemeContext.Provider value={themeValue}>\n      {children}\n    </ThemeContext.Provider>\n  );\n}\n\nexport function useThemeContext() {\n  const context = useContext(ThemeContext);\n  if (context === undefined) {\n    throw new Error(\"useThemeContext must be used within a ThemeProvider\");\n  }\n  return context;\n}\n","size_bytes":695},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1419},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1128},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":1901},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n","size_bytes":1858},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":791},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5742},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"client/src/components/ui/sidebar.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { VariantProps, cva } from \"class-variance-authority\"\nimport { PanelLeft } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nconst SidebarProvider = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    defaultOpen?: boolean\n    open?: boolean\n    onOpenChange?: (open: boolean) => void\n  }\n>(\n  (\n    {\n      defaultOpen = true,\n      open: openProp,\n      onOpenChange: setOpenProp,\n      className,\n      style,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const isMobile = useIsMobile()\n    const [openMobile, setOpenMobile] = React.useState(false)\n\n    // This is the internal state of the sidebar.\n    // We use openProp and setOpenProp for control from outside the component.\n    const [_open, _setOpen] = React.useState(defaultOpen)\n    const open = openProp ?? _open\n    const setOpen = React.useCallback(\n      (value: boolean | ((value: boolean) => boolean)) => {\n        const openState = typeof value === \"function\" ? value(open) : value\n        if (setOpenProp) {\n          setOpenProp(openState)\n        } else {\n          _setOpen(openState)\n        }\n\n        // This sets the cookie to keep the sidebar state.\n        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n      },\n      [setOpenProp, open]\n    )\n\n    // Helper to toggle the sidebar.\n    const toggleSidebar = React.useCallback(() => {\n      return isMobile\n        ? setOpenMobile((open) => !open)\n        : setOpen((open) => !open)\n    }, [isMobile, setOpen, setOpenMobile])\n\n    // Adds a keyboard shortcut to toggle the sidebar.\n    React.useEffect(() => {\n      const handleKeyDown = (event: KeyboardEvent) => {\n        if (\n          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n          (event.metaKey || event.ctrlKey)\n        ) {\n          event.preventDefault()\n          toggleSidebar()\n        }\n      }\n\n      window.addEventListener(\"keydown\", handleKeyDown)\n      return () => window.removeEventListener(\"keydown\", handleKeyDown)\n    }, [toggleSidebar])\n\n    // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n    // This makes it easier to style the sidebar with Tailwind classes.\n    const state = open ? \"expanded\" : \"collapsed\"\n\n    const contextValue = React.useMemo<SidebarContextProps>(\n      () => ({\n        state,\n        open,\n        setOpen,\n        isMobile,\n        openMobile,\n        setOpenMobile,\n        toggleSidebar,\n      }),\n      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n    )\n\n    return (\n      <SidebarContext.Provider value={contextValue}>\n        <TooltipProvider delayDuration={0}>\n          <div\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH,\n                \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n                ...style,\n              } as React.CSSProperties\n            }\n            className={cn(\n              \"group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar\",\n              className\n            )}\n            ref={ref}\n            {...props}\n          >\n            {children}\n          </div>\n        </TooltipProvider>\n      </SidebarContext.Provider>\n    )\n  }\n)\nSidebarProvider.displayName = \"SidebarProvider\"\n\nconst Sidebar = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    side?: \"left\" | \"right\"\n    variant?: \"sidebar\" | \"floating\" | \"inset\"\n    collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n  }\n>(\n  (\n    {\n      side = \"left\",\n      variant = \"sidebar\",\n      collapsible = \"offcanvas\",\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n    if (collapsible === \"none\") {\n      return (\n        <div\n          className={cn(\n            \"flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground\",\n            className\n          )}\n          ref={ref}\n          {...props}\n        >\n          {children}\n        </div>\n      )\n    }\n\n    if (isMobile) {\n      return (\n        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n          <SheetContent\n            data-sidebar=\"sidebar\"\n            data-mobile=\"true\"\n            className=\"w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden\"\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n              } as React.CSSProperties\n            }\n            side={side}\n          >\n            <SheetHeader className=\"sr-only\">\n              <SheetTitle>Sidebar</SheetTitle>\n              <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n            </SheetHeader>\n            <div className=\"flex h-full w-full flex-col\">{children}</div>\n          </SheetContent>\n        </Sheet>\n      )\n    }\n\n    return (\n      <div\n        ref={ref}\n        className=\"group peer hidden text-sidebar-foreground md:block\"\n        data-state={state}\n        data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n        data-variant={variant}\n        data-side={side}\n      >\n        {/* This is what handles the sidebar gap on desktop */}\n        <div\n          className={cn(\n            \"relative w-[--sidebar-width] bg-transparent transition-[width] duration-200 ease-linear\",\n            \"group-data-[collapsible=offcanvas]:w-0\",\n            \"group-data-[side=right]:rotate-180\",\n            variant === \"floating\" || variant === \"inset\"\n              ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon]\"\n          )}\n        />\n        <div\n          className={cn(\n            \"fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] duration-200 ease-linear md:flex\",\n            side === \"left\"\n              ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n              : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n            // Adjust the padding for floating and inset variants.\n            variant === \"floating\" || variant === \"inset\"\n              ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n            className\n          )}\n          {...props}\n        >\n          <div\n            data-sidebar=\"sidebar\"\n            className=\"flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow\"\n          >\n            {children}\n          </div>\n        </div>\n      </div>\n    )\n  }\n)\nSidebar.displayName = \"Sidebar\"\n\nconst SidebarTrigger = React.forwardRef<\n  React.ElementRef<typeof Button>,\n  React.ComponentProps<typeof Button>\n>(({ className, onClick, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      ref={ref}\n      data-sidebar=\"trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeft />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n})\nSidebarTrigger.displayName = \"SidebarTrigger\"\n\nconst SidebarRail = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\">\n>(({ className, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <button\n      ref={ref}\n      data-sidebar=\"rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex\",\n        \"[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarRail.displayName = \"SidebarRail\"\n\nconst SidebarInset = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"main\">\n>(({ className, ...props }, ref) => {\n  return (\n    <main\n      ref={ref}\n      className={cn(\n        \"relative flex w-full flex-1 flex-col bg-background\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInset.displayName = \"SidebarInset\"\n\nconst SidebarInput = React.forwardRef<\n  React.ElementRef<typeof Input>,\n  React.ComponentProps<typeof Input>\n>(({ className, ...props }, ref) => {\n  return (\n    <Input\n      ref={ref}\n      data-sidebar=\"input\"\n      className={cn(\n        \"h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInput.displayName = \"SidebarInput\"\n\nconst SidebarHeader = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarHeader.displayName = \"SidebarHeader\"\n\nconst SidebarFooter = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarFooter.displayName = \"SidebarFooter\"\n\nconst SidebarSeparator = React.forwardRef<\n  React.ElementRef<typeof Separator>,\n  React.ComponentProps<typeof Separator>\n>(({ className, ...props }, ref) => {\n  return (\n    <Separator\n      ref={ref}\n      data-sidebar=\"separator\"\n      className={cn(\"mx-2 w-auto bg-sidebar-border\", className)}\n      {...props}\n    />\n  )\n})\nSidebarSeparator.displayName = \"SidebarSeparator\"\n\nconst SidebarContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarContent.displayName = \"SidebarContent\"\n\nconst SidebarGroup = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarGroup.displayName = \"SidebarGroup\"\n\nconst SidebarGroupLabel = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupLabel.displayName = \"SidebarGroupLabel\"\n\nconst SidebarGroupAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupAction.displayName = \"SidebarGroupAction\"\n\nconst SidebarGroupContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"group-content\"\n    className={cn(\"w-full text-sm\", className)}\n    {...props}\n  />\n))\nSidebarGroupContent.displayName = \"SidebarGroupContent\"\n\nconst SidebarMenu = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu\"\n    className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n    {...props}\n  />\n))\nSidebarMenu.displayName = \"SidebarMenu\"\n\nconst SidebarMenuItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    data-sidebar=\"menu-item\"\n    className={cn(\"group/menu-item relative\", className)}\n    {...props}\n  />\n))\nSidebarMenuItem.displayName = \"SidebarMenuItem\"\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:!p-0\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst SidebarMenuButton = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    isActive?: boolean\n    tooltip?: string | React.ComponentProps<typeof TooltipContent>\n  } & VariantProps<typeof sidebarMenuButtonVariants>\n>(\n  (\n    {\n      asChild = false,\n      isActive = false,\n      variant = \"default\",\n      size = \"default\",\n      tooltip,\n      className,\n      ...props\n    },\n    ref\n  ) => {\n    const Comp = asChild ? Slot : \"button\"\n    const { isMobile, state } = useSidebar()\n\n    const button = (\n      <Comp\n        ref={ref}\n        data-sidebar=\"menu-button\"\n        data-size={size}\n        data-active={isActive}\n        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n        {...props}\n      />\n    )\n\n    if (!tooltip) {\n      return button\n    }\n\n    if (typeof tooltip === \"string\") {\n      tooltip = {\n        children: tooltip,\n      }\n    }\n\n    return (\n      <Tooltip>\n        <TooltipTrigger asChild>{button}</TooltipTrigger>\n        <TooltipContent\n          side=\"right\"\n          align=\"center\"\n          hidden={state !== \"collapsed\" || isMobile}\n          {...tooltip}\n        />\n      </Tooltip>\n    )\n  }\n)\nSidebarMenuButton.displayName = \"SidebarMenuButton\"\n\nconst SidebarMenuAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    showOnHover?: boolean\n  }\n>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuAction.displayName = \"SidebarMenuAction\"\n\nconst SidebarMenuBadge = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"menu-badge\"\n    className={cn(\n      \"pointer-events-none absolute right-1 flex h-5 min-w-5 select-none items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground\",\n      \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n      \"peer-data-[size=sm]/menu-button:top-1\",\n      \"peer-data-[size=default]/menu-button:top-1.5\",\n      \"peer-data-[size=lg]/menu-button:top-2.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuBadge.displayName = \"SidebarMenuBadge\"\n\nconst SidebarMenuSkeleton = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    showIcon?: boolean\n  }\n>(({ className, showIcon = false, ...props }, ref) => {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[--skeleton-width] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n})\nSidebarMenuSkeleton.displayName = \"SidebarMenuSkeleton\"\n\nconst SidebarMenuSub = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu-sub\"\n    className={cn(\n      \"mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuSub.displayName = \"SidebarMenuSub\"\n\nconst SidebarMenuSubItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ ...props }, ref) => <li ref={ref} {...props} />)\nSidebarMenuSubItem.displayName = \"SidebarMenuSubItem\"\n\nconst SidebarMenuSubButton = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentProps<\"a\"> & {\n    asChild?: boolean\n    size?: \"sm\" | \"md\"\n    isActive?: boolean\n  }\n>(({ asChild = false, size = \"md\", isActive, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuSubButton.displayName = \"SidebarMenuSubButton\"\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":23567},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209},"client/src/pages/AllConsoles.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { Link } from \"wouter\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Skeleton } from \"@/components/ui/skeleton\";\n\ninterface Console {\n  id: string;\n  name: string;\n  description: string;\n  gameCount: number;\n  image: string;\n  popularity: number;\n  downloadCount?: number;\n}\n\nexport default function AllConsoles() {\n  const { data: romData, isLoading } = useQuery({\n    queryKey: ['/api/rom-data'],\n    queryFn: async () => {\n      const response = await fetch('/api/rom-data');\n      if (!response.ok) throw new Error('Failed to fetch ROM data');\n      return response.json();\n    },\n  });\n\n  // Sort consoles by popularity (most downloaded games)\n  const sortedConsoles = romData?.categories?.sort((a: Console, b: Console) => (b.downloadCount || b.gameCount) - (a.downloadCount || a.gameCount)) || [];\n\n  return (\n    <div className=\"container mx-auto px-4 py-8\">\n      {/* Page Header */}\n      <div className=\"text-center mb-12\">\n        <h1 className=\"text-4xl font-bold mb-4\" data-testid=\"text-page-title\">\n          All Console\n        </h1>\n        <p className=\"text-xl text-muted-foreground max-w-3xl mx-auto\" data-testid=\"text-page-description\">\n          Browse and download ROMs from all gaming consoles. Discover classic games from Nintendo, PlayStation, Sega, and many more platforms organized by most downloaded games.\n        </p>\n      </div>\n\n      {/* Consoles Grid */}\n      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-6\">\n        {isLoading ? (\n          Array.from({ length: 12 }).map((_, i) => (\n            <div key={i} className=\"loading-skeleton rounded-lg h-48\" />\n          ))\n        ) : (\n          sortedConsoles.map((console: Console) => (\n            <Link\n              key={console.id}\n              to={`/roms/${console.id}`}\n              data-testid={`link-console-${console.id}`}\n            >\n              <Card className=\"hover:shadow-lg transition-all duration-300 transform hover:-translate-y-1 cursor-pointer group\">\n                <CardContent className=\"p-6 text-center\">\n                  <div className=\"mb-4 flex justify-center\">\n                    <img\n                      src={console.image || '/api/placeholder/80/80'}\n                      alt={`${console.name} console`}\n                      className=\"w-20 h-20 object-contain group-hover:scale-110 transition-transform duration-300\"\n                      data-testid={`img-console-${console.id}`}\n                    />\n                  </div>\n                  <h3 className=\"text-lg font-semibold mb-2 group-hover:text-primary transition-colors\" data-testid={`text-console-name-${console.id}`}>\n                    {console.name}\n                  </h3>\n                  <p className=\"text-sm text-muted-foreground mb-3 line-clamp-2\" data-testid={`text-console-description-${console.id}`}>\n                    {console.description}\n                  </p>\n                  <div className=\"text-xs font-medium text-primary\" data-testid={`text-console-count-${console.id}`}>\n                    {console.gameCount.toLocaleString()} games\n                  </div>\n                </CardContent>\n              </Card>\n            </Link>\n          ))\n        )}\n      </div>\n\n      {/* Loading State */}\n      {isLoading && (\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-6\">\n          {Array.from({ length: 12 }).map((_, i) => (\n            <Card key={i}>\n              <CardContent className=\"p-6 text-center\">\n                <Skeleton className=\"w-20 h-20 mx-auto mb-4 rounded\" />\n                <Skeleton className=\"h-6 w-3/4 mx-auto mb-2\" />\n                <Skeleton className=\"h-4 w-full mb-3\" />\n                <Skeleton className=\"h-4 w-1/2 mx-auto\" />\n              </CardContent>\n            </Card>\n          ))}\n        </div>\n      )}\n    </div>\n  );\n}","size_bytes":3943},"client/src/pages/About.tsx":{"content":"import { useEffect } from \"react\";\n\nexport default function About() {\n  useEffect(() => {\n    document.title = \"About Us - EmulatorGames\";\n    \n    const metaDescription = document.querySelector('meta[name=\"description\"]');\n    if (metaDescription) {\n      metaDescription.setAttribute('content', \n        \"Learn more about EmulatorGames - your trusted source for classic video game ROMs and emulators.\"\n      );\n    }\n  }, []);\n\n  return (\n    <div className=\"container mx-auto px-4 py-12\">\n      <div className=\"max-w-4xl mx-auto\">\n        <h1 className=\"text-4xl font-bold mb-8 text-center\" data-testid=\"text-about-title\">\n          About EmulatorGames\n        </h1>\n        \n        <div className=\"prose prose-lg max-w-none space-y-8\">\n          <section>\n            <h2 className=\"text-2xl font-semibold mb-4 text-foreground\">Our Mission</h2>\n            <p className=\"text-foreground/80 mb-6\">\n              EmulatorGames is dedicated to preserving gaming history and making classic video games accessible to everyone. \n              We believe that retro gaming is an important part of digital culture and should be preserved for future generations.\n            </p>\n          </section>\n\n          <section>\n            <h2 className=\"text-2xl font-semibold mb-4 text-foreground\">What We Offer</h2>\n            <p className=\"text-foreground/80 mb-4\">\n              Our platform provides access to:\n            </p>\n            <ul className=\"list-disc list-inside space-y-2 text-foreground/80 mb-6\">\n              <li>Comprehensive collection of classic video game ROMs</li>\n              <li>Compatible emulators for various gaming platforms</li>\n              <li>User-friendly interface for easy navigation</li>\n              <li>Regular updates and maintenance</li>\n              <li>Safe and secure downloads</li>\n            </ul>\n          </section>\n\n          <section>\n            <h2 className=\"text-2xl font-semibold mb-4 text-foreground\">Our Commitment</h2>\n            <p className=\"text-foreground/80 mb-6\">\n              We are committed to providing a safe and reliable platform for retro gaming enthusiasts. \n              All content on our website is carefully curated and tested to ensure the best possible user experience.\n            </p>\n          </section>\n\n          <section>\n            <h2 className=\"text-2xl font-semibold mb-4 text-foreground\">Join Our Community</h2>\n            <p className=\"text-foreground/80\">\n              Whether you're a longtime retro gaming fan or just discovering classic games, \n              EmulatorGames welcomes you to join our community of gaming enthusiasts. \n              Explore our collection and rediscover the magic of classic gaming.\n            </p>\n          </section>\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":2801},"client/src/pages/Contact.tsx":{"content":"import { useEffect } from \"react\";\n\nexport default function Contact() {\n  useEffect(() => {\n    document.title = \"Contact Us - EmulatorGames\";\n    \n    const metaDescription = document.querySelector('meta[name=\"description\"]');\n    if (metaDescription) {\n      metaDescription.setAttribute('content', \n        \"Get in touch with the EmulatorGames team. Contact us for support, feedback, or general inquiries.\"\n      );\n    }\n  }, []);\n\n  return (\n    <div className=\"container mx-auto px-4 py-12\">\n      <div className=\"max-w-4xl mx-auto\">\n        <h1 className=\"text-4xl font-bold mb-8 text-center\" data-testid=\"text-contact-title\">\n          Contact Us\n        </h1>\n        \n        <div className=\"grid md:grid-cols-2 gap-12\">\n          <div>\n            <h2 className=\"text-2xl font-semibold mb-6 text-foreground\">Get in Touch</h2>\n            <p className=\"text-foreground/80 mb-8\">\n              We'd love to hear from you! Whether you have questions, feedback, or need support, \n              our team is here to help. Reach out to us using the information below.\n            </p>\n\n            <div className=\"space-y-6\">\n              <div>\n                <h3 className=\"text-lg font-semibold mb-2 text-foreground\">General Inquiries</h3>\n                <p className=\"text-foreground/80\">\n                  For general questions about our platform, games, or services.\n                </p>\n              </div>\n\n              <div>\n                <h3 className=\"text-lg font-semibold mb-2 text-foreground\">Technical Support</h3>\n                <p className=\"text-foreground/80\">\n                  Having trouble with downloads or emulators? We're here to help with technical issues.\n                </p>\n              </div>\n\n              <div>\n                <h3 className=\"text-lg font-semibold mb-2 text-foreground\">Feedback</h3>\n                <p className=\"text-foreground/80\">\n                  We value your feedback and suggestions to improve our platform and user experience.\n                </p>\n              </div>\n            </div>\n          </div>\n\n          <div className=\"bg-card border border-border rounded-lg p-8\">\n            <h3 className=\"text-xl font-semibold mb-6 text-foreground\">Contact Information</h3>\n            \n            <div className=\"space-y-6\">\n              <div>\n                <h4 className=\"font-semibold text-foreground mb-2\">Response Time</h4>\n                <p className=\"text-foreground/80\">\n                  We typically respond to all inquiries within 24-48 hours during business days.\n                </p>\n              </div>\n\n              <div>\n                <h4 className=\"font-semibold text-foreground mb-2\">Business Hours</h4>\n                <p className=\"text-foreground/80\">\n                  Monday - Friday: 9:00 AM - 6:00 PM (EST)<br />\n                  Weekend support available for urgent technical issues.\n                </p>\n              </div>\n\n              <div>\n                <h4 className=\"font-semibold text-foreground mb-2\">Language Support</h4>\n                <p className=\"text-foreground/80\">\n                  We provide support in English and are working to expand our language options.\n                </p>\n              </div>\n            </div>\n          </div>\n        </div>\n\n        <div className=\"mt-12 text-center\">\n          <p className=\"text-foreground/80\">\n            Thank you for choosing EmulatorGames. We appreciate your interest in retro gaming \n            and look forward to hearing from you!\n          </p>\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":3580},"client/src/pages/Privacy.tsx":{"content":"import { useEffect } from \"react\";\n\nexport default function Privacy() {\n  useEffect(() => {\n    document.title = \"Privacy Policy - EmulatorGames\";\n    \n    const metaDescription = document.querySelector('meta[name=\"description\"]');\n    if (metaDescription) {\n      metaDescription.setAttribute('content', \n        \"Read EmulatorGames' privacy policy to understand how we collect, use, and protect your personal information.\"\n      );\n    }\n  }, []);\n\n  return (\n    <div className=\"container mx-auto px-4 py-12\">\n      <div className=\"max-w-4xl mx-auto\">\n        <h1 className=\"text-4xl font-bold mb-8 text-center\" data-testid=\"text-privacy-title\">\n          Privacy Policy\n        </h1>\n        \n        <div className=\"prose prose-lg max-w-none space-y-8\">\n          <p className=\"text-foreground/80 text-center mb-8\">\n            <strong>Last updated:</strong> January 2025\n          </p>\n\n          <section>\n            <h2 className=\"text-2xl font-semibold mb-4 text-foreground\">1. Information We Collect</h2>\n            <p className=\"text-foreground/80 mb-4\">\n              We collect information you provide directly to us, such as when you:\n            </p>\n            <ul className=\"list-disc list-inside space-y-2 text-foreground/80 mb-6\">\n              <li>Browse our website and use our services</li>\n              <li>Contact us with questions or feedback</li>\n              <li>Subscribe to our updates or newsletters</li>\n            </ul>\n          </section>\n\n          <section>\n            <h2 className=\"text-2xl font-semibold mb-4 text-foreground\">2. How We Use Your Information</h2>\n            <p className=\"text-foreground/80 mb-4\">\n              We use the information we collect to:\n            </p>\n            <ul className=\"list-disc list-inside space-y-2 text-foreground/80 mb-6\">\n              <li>Provide, maintain, and improve our services</li>\n              <li>Respond to your comments, questions, and requests</li>\n              <li>Monitor and analyze trends, usage, and activities</li>\n              <li>Detect, investigate, and prevent fraudulent activities</li>\n            </ul>\n          </section>\n\n          <section>\n            <h2 className=\"text-2xl font-semibold mb-4 text-foreground\">3. Information Sharing</h2>\n            <p className=\"text-foreground/80 mb-6\">\n              We do not sell, trade, or otherwise transfer your personal information to third parties \n              without your consent, except as described in this privacy policy or as required by law.\n            </p>\n          </section>\n\n          <section>\n            <h2 className=\"text-2xl font-semibold mb-4 text-foreground\">4. Data Security</h2>\n            <p className=\"text-foreground/80 mb-6\">\n              We implement appropriate security measures to protect your personal information against \n              unauthorized access, alteration, disclosure, or destruction. However, no method of \n              transmission over the internet is 100% secure.\n            </p>\n          </section>\n\n          <section>\n            <h2 className=\"text-2xl font-semibold mb-4 text-foreground\">5. Cookies and Tracking</h2>\n            <p className=\"text-foreground/80 mb-6\">\n              We use cookies and similar tracking technologies to enhance your browsing experience \n              and analyze website traffic. You can control cookie settings through your browser preferences.\n            </p>\n          </section>\n\n          <section>\n            <h2 className=\"text-2xl font-semibold mb-4 text-foreground\">6. Third-Party Links</h2>\n            <p className=\"text-foreground/80 mb-6\">\n              Our website may contain links to third-party websites. We are not responsible for \n              the privacy practices or content of these external sites. We encourage you to review \n              their privacy policies.\n            </p>\n          </section>\n\n          <section>\n            <h2 className=\"text-2xl font-semibold mb-4 text-foreground\">7. Changes to This Policy</h2>\n            <p className=\"text-foreground/80 mb-6\">\n              We may update this privacy policy from time to time. We will notify you of any changes \n              by posting the new privacy policy on this page and updating the \"Last updated\" date.\n            </p>\n          </section>\n\n          <section>\n            <h2 className=\"text-2xl font-semibold mb-4 text-foreground\">8. Contact Us</h2>\n            <p className=\"text-foreground/80\">\n              If you have any questions about this privacy policy or our privacy practices, \n              please contact us through our contact page.\n            </p>\n          </section>\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":4700},"client/src/pages/Terms.tsx":{"content":"import { useEffect } from \"react\";\n\nexport default function Terms() {\n  useEffect(() => {\n    document.title = \"Terms of Service - EmulatorGames\";\n    \n    const metaDescription = document.querySelector('meta[name=\"description\"]');\n    if (metaDescription) {\n      metaDescription.setAttribute('content', \n        \"Read EmulatorGames' terms of service to understand the rules and guidelines for using our platform.\"\n      );\n    }\n  }, []);\n\n  return (\n    <div className=\"container mx-auto px-4 py-12\">\n      <div className=\"max-w-4xl mx-auto\">\n        <h1 className=\"text-4xl font-bold mb-8 text-center\" data-testid=\"text-terms-title\">\n          Terms of Service\n        </h1>\n        \n        <div className=\"prose prose-lg max-w-none space-y-8\">\n          <p className=\"text-foreground/80 text-center mb-8\">\n            <strong>Last updated:</strong> January 2025\n          </p>\n\n          <section>\n            <h2 className=\"text-2xl font-semibold mb-4 text-foreground\">1. Acceptance of Terms</h2>\n            <p className=\"text-foreground/80 mb-6\">\n              By accessing and using EmulatorGames, you accept and agree to be bound by the terms \n              and provision of this agreement. If you do not agree to abide by the above, please \n              do not use this service.\n            </p>\n          </section>\n\n          <section>\n            <h2 className=\"text-2xl font-semibold mb-4 text-foreground\">2. Use License</h2>\n            <p className=\"text-foreground/80 mb-4\">\n              Permission is granted to temporarily download one copy of the materials on EmulatorGames \n              for personal, non-commercial transitory viewing only. This is the grant of a license, not a transfer of title, and under this license you may not:\n            </p>\n            <ul className=\"list-disc list-inside space-y-2 text-foreground/80 mb-6\">\n              <li>Modify or copy the materials</li>\n              <li>Use the materials for any commercial purpose or for any public display</li>\n              <li>Attempt to reverse engineer any software contained on the website</li>\n              <li>Remove any copyright or other proprietary notations from the materials</li>\n            </ul>\n          </section>\n\n          <section>\n            <h2 className=\"text-2xl font-semibold mb-4 text-foreground\">3. Disclaimer</h2>\n            <p className=\"text-foreground/80 mb-6\">\n              The materials on EmulatorGames are provided on an 'as is' basis. EmulatorGames makes \n              no warranties, expressed or implied, and hereby disclaims and negates all other warranties \n              including without limitation, implied warranties or conditions of merchantability, fitness \n              for a particular purpose, or non-infringement of intellectual property or other violation of rights.\n            </p>\n          </section>\n\n          <section>\n            <h2 className=\"text-2xl font-semibold mb-4 text-foreground\">4. Limitations</h2>\n            <p className=\"text-foreground/80 mb-6\">\n              In no event shall EmulatorGames or its suppliers be liable for any damages (including, \n              without limitation, damages for loss of data or profit, or due to business interruption) \n              arising out of the use or inability to use the materials on EmulatorGames, even if \n              EmulatorGames or its authorized representative has been notified orally or in writing \n              of the possibility of such damage.\n            </p>\n          </section>\n\n          <section>\n            <h2 className=\"text-2xl font-semibold mb-4 text-foreground\">5. Copyright Notice</h2>\n            <p className=\"text-foreground/80 mb-6\">\n              At EmulatorGames, we do not encourage or promote the downloading of ROMs, not even for \n              discontinued titles. Therefore, we do not host or link to any copyrighted content. \n              We respect intellectual property rights and expect our users to do the same.\n            </p>\n          </section>\n\n          <section>\n            <h2 className=\"text-2xl font-semibold mb-4 text-foreground\">6. User Conduct</h2>\n            <p className=\"text-foreground/80 mb-4\">\n              Users agree not to:\n            </p>\n            <ul className=\"list-disc list-inside space-y-2 text-foreground/80 mb-6\">\n              <li>Use the service for any illegal or unauthorized purpose</li>\n              <li>Violate any laws in your jurisdiction</li>\n              <li>Transmit worms, viruses, or any code of a destructive nature</li>\n              <li>Attempt to gain unauthorized access to any part of the service</li>\n            </ul>\n          </section>\n\n          <section>\n            <h2 className=\"text-2xl font-semibold mb-4 text-foreground\">7. Modifications</h2>\n            <p className=\"text-foreground/80 mb-6\">\n              EmulatorGames may revise these terms of service at any time without notice. \n              By using this website, you are agreeing to be bound by the then current version \n              of these terms of service.\n            </p>\n          </section>\n\n          <section>\n            <h2 className=\"text-2xl font-semibold mb-4 text-foreground\">8. Contact Information</h2>\n            <p className=\"text-foreground/80\">\n              If you have any questions about these Terms of Service, please contact us \n              through our contact page.\n            </p>\n          </section>\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":5478},"client/src/components/AdSense.tsx":{"content":"import { useEffect } from 'react';\n\ninterface AdSenseProps {\n  adSlot: string;\n  adClient?: string;\n  adFormat?: string;\n  fullWidthResponsive?: boolean;\n  style?: React.CSSProperties;\n}\n\nexport function AdSense({ \n  adSlot, \n  adClient = \"ca-pub-4291572749420740\",\n  adFormat = \"auto\",\n  fullWidthResponsive = true,\n  style = { display: 'block' }\n}: AdSenseProps) {\n  useEffect(() => {\n    try {\n      // Load AdSense script if not already loaded\n      if (!window.adsbygoogle) {\n        const script = document.createElement('script');\n        script.src = 'https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=' + adClient;\n        script.async = true;\n        script.crossOrigin = 'anonymous';\n        document.head.appendChild(script);\n      }\n\n      // Push ad to AdSense\n      const timer = setTimeout(() => {\n        try {\n          (window.adsbygoogle = window.adsbygoogle || []).push({});\n        } catch (err) {\n          console.log('AdSense error:', err);\n        }\n      }, 100);\n\n      return () => clearTimeout(timer);\n    } catch (err) {\n      console.log('AdSense loading error:', err);\n    }\n  }, [adClient]);\n\n  return (\n    <ins \n      className=\"adsbygoogle\"\n      style={style}\n      data-ad-client={adClient}\n      data-ad-slot={adSlot}\n      data-ad-format={adFormat}\n      data-full-width-responsive={fullWidthResponsive.toString()}\n    />\n  );\n}\n\n// Declare global adsbygoogle for TypeScript\ndeclare global {\n  interface Window {\n    adsbygoogle: any[];\n  }\n}","size_bytes":1503}},"version":1}